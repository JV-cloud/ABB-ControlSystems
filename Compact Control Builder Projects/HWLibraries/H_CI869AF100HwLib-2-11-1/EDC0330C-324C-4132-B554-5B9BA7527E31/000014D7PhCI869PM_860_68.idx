<HEAD>
Index of symbols created 2015-11-12  9:00:22,08 
</HEAD>
<SECTIONS=15>
00010000 00025d64 .text
00025d64 000262c8 .got2
000262c8 000269a8 .fixup
000269a8 000269b8 .bss
000269b8 000269c4 .data
000269c4 000286dc .debug_abbrev
000286dc 000426e6 .debug_info
000426e6 000467c8 .debug_line
000467c8 000496f0 .debug_frame
000496f0 000531fb .debug_loc
000531fb 000565be .debug_pubnames
000565be 00056886 .debug_aranges
00056886 00056f26 .debug_ranges
00056f26 000606db .debug_str
000606db 000606db .comment
</SECTIONS>
<SYMBOLS=663>
00000000 PhCI869PM_860_68.elf EXE_HEAD
00000064 PhCI869PM_860_68.elf CPhAF100PM::IsAcceptableDriverVersion(int)
000001b8 PhCI869PM_860_68.elf CPhAF100PM::CheckCompatibility(trHWFAddress const*, tFirmwareInfo, unsigned long*, unsigned long*)
00000314 PhCI869PM_860_68.elf CPhAF100PM::FetchRequiredFirmwareInfo(tFirmwareInfo&)
00000370 PhCI869PM_860_68.elf CPhAF100PM::ProtocolSpecificConfigurationValues(trHWFAddress, bool&, unsigned long&, unsigned long&, unsigned short&, unsigned long&)
00000510 PhCI869PM_860_68.elf CPhAF100PM::GetProductInfo(unsigned char*, unsigned char*, unsigned char*, unsigned long)
0000059c PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::~CPhAF100PM()
000005a4 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::~CPhAF100PM()
000005ac PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::~CPhAF100PM()
000005b4 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::~CPhAF100PM()
000005c0 PhCI869PM_860_68.elf CPhAF100PM::~CPhAF100PM()
00000634 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::~CPhAF100PM()
0000063c PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::~CPhAF100PM()
00000644 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::~CPhAF100PM()
0000064c PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::~CPhAF100PM()
00000658 PhCI869PM_860_68.elf CPhAF100PM::~CPhAF100PM()
000006bc PhCI869PM_860_68.elf CPhAF100PM::~CPhAF100PM()
00000720 PhCI869PM_860_68.elf CPhAF100PM::CPhAF100PM()
000007b0 PhCI869PM_860_68.elf CPhAF100PM::CPhAF100PM()
00000840 PhCI869PM_860_68.elf ObjectFactory
00000958 PhCI869PM_860_68.elf operator delete(void*)
00000994 PhCI869PM_860_68.elf __cxa_pure_virtual
000009cc PhCI869PM_860_68.elf CPhCommon_Base::CPhCommon_Base()
00000a30 PhCI869PM_860_68.elf CPhCommon_Base::CPhCommon_Base()
00000a90 PhCI869PM_860_68.elf CPhCommon_Base::GetProductInfo(unsigned char*, unsigned char*, unsigned char*, unsigned long)
00000acc PhCI869PM_860_68.elf CPhCommon_Base::SetCommonCallbackInterface(ICommonCallback*)
00000afc PhCI869PM_860_68.elf CPhConfig_Base1::PrepareForTermination(teHWFErrorCode*)
00000b2c PhCI869PM_860_68.elf CPhConfig_Base1::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode*)
00000b5c PhCI869PM_860_68.elf CPhConfig_Base1::RemoveIoConnection(unsigned long, teHWFErrorCode*)
00000b90 PhCI869PM_860_68.elf CPhConfig_Base1::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode*)
00000bc0 PhCI869PM_860_68.elf CPhConfig_Base1::PhResponsibility(trHWFAddress, teHWFErrorCode*)
00000bf0 PhCI869PM_860_68.elf CPhConfig_Base1::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode*)
00000c24 PhCI869PM_860_68.elf CPhConfig_Base1::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode*)
00000c54 PhCI869PM_860_68.elf CPhConfig_Base1::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode*)
00000c84 PhCI869PM_860_68.elf CPhConfig_Base1::PerformSwitchover(trHWFAddress, teHWFErrorCode*)
00000cb4 PhCI869PM_860_68.elf CPhConfig_Base1::StartUsingDevice(trHWFAddress, teHWFErrorCode*)
00000ce4 PhCI869PM_860_68.elf CPhConfig_Base1::PerformFailover(trHWFAddress, teHWFErrorCode*)
00000d14 PhCI869PM_860_68.elf CPhClient_Base::ConnectReq(unsigned long, unsigned long*, int*)
00000d4c PhCI869PM_860_68.elf CPhClient_Base::DisconnectReq(unsigned long, unsigned long, int*)
00000d84 PhCI869PM_860_68.elf CPhClient_Base::ReadVarReq(unsigned long, int*)
00000db8 PhCI869PM_860_68.elf CPhClient_Base::WriteVarReq(unsigned long, int*)
00000dec PhCI869PM_860_68.elf CPhClient_Base::ReadRawReq(unsigned long, int*)
00000e20 PhCI869PM_860_68.elf CPhClient_Base::WriteRawReq(unsigned long, int*)
00000e54 PhCI869PM_860_68.elf CPhClient_Base::AbortRawReq(unsigned long, int*)
00000e88 PhCI869PM_860_68.elf CPhClient_Base::AbortVarReq(unsigned long, int*)
00000ebc PhCI869PM_860_68.elf CPhClient_Base::GetExtendedStatusSize(unsigned long, int*, int*)
00000ef4 PhCI869PM_860_68.elf CPhClient_Base::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
00000f34 PhCI869PM_860_68.elf CPhClient_Base::SetStatus(unsigned long, int, int*)
00000f6c PhCI869PM_860_68.elf CPhClient_Base::ReadRes(unsigned long, int, int*)
00000fa4 PhCI869PM_860_68.elf CPhClient_Base::WriteRes(unsigned long, int, int*)
00000fdc PhCI869PM_860_68.elf CPhClient_Base1::ConnectReq(unsigned long, unsigned long*, int*)
00001014 PhCI869PM_860_68.elf CPhClient_Base1::DisconnectReq(unsigned long, unsigned long, int*)
0000104c PhCI869PM_860_68.elf CPhClient_Base1::ReadVarReq(unsigned long, int*)
00001080 PhCI869PM_860_68.elf CPhClient_Base1::WriteVarReq(unsigned long, int*)
000010b4 PhCI869PM_860_68.elf CPhClient_Base1::RegisterVarReq(unsigned long, int*)
000010e8 PhCI869PM_860_68.elf CPhClient_Base1::ReadRawReq(unsigned long, int*)
0000111c PhCI869PM_860_68.elf CPhClient_Base1::WriteRawReq(unsigned long, int*)
00001150 PhCI869PM_860_68.elf CPhClient_Base1::AbortRawReq(unsigned long, int*)
00001184 PhCI869PM_860_68.elf CPhClient_Base1::AbortVarReq(unsigned long, int*)
000011b8 PhCI869PM_860_68.elf CPhClient_Base1::TimeoutAbortVarReq(unsigned long, int*)
0000121c PhCI869PM_860_68.elf CPhClient_Base1::GetExtendedStatusSize(unsigned long, int*, int*)
00001254 PhCI869PM_860_68.elf CPhClient_Base1::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
00001294 PhCI869PM_860_68.elf CPhClient_Base1::BufferTakeForReceive(unsigned long, int*)
000012c8 PhCI869PM_860_68.elf CPhClient_Base1::BufferGiveForReceive(unsigned long, int, int*)
00001300 PhCI869PM_860_68.elf CPhClient_Base1::BufferTakeForSend(unsigned long, unsigned int, int*)
00001338 PhCI869PM_860_68.elf CPhClient_Base1::BufferGiveForSend(unsigned long, unsigned int, int, int*)
00001374 PhCI869PM_860_68.elf CPhClient_Base1::SetStatus(unsigned long, int, int*)
000013ac PhCI869PM_860_68.elf CPhClient_Base1::ReadRes(unsigned long, int, int*)
000013e4 PhCI869PM_860_68.elf CPhClient_Base1::WriteRes(unsigned long, int, int*)
0000141c PhCI869PM_860_68.elf CPhStatus_Base1::KickWatchdog(unsigned short*, teHWFErrorCode*)
00001450 PhCI869PM_860_68.elf CPhStatus_Base1::GetStatus(trHWFAddress, teHWFUnitKind, unsigned long*, unsigned long*, teHWFErrorCode*)
0000148c PhCI869PM_860_68.elf CPhIOAccess_Base::GetCopyRoutineReference(unsigned int, void (**)(short, void*, void*), IOAccessErrorCode*)
000014c4 PhCI869PM_860_68.elf CPhIOAccess_Base::ObtainDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
000014f8 PhCI869PM_860_68.elf CPhIOAccess_Base::ReleaseDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
0000152c PhCI869PM_860_68.elf CPhDiagnostics_Base::PhDiagnosticsTableNew(teDiagErrorCode*)
0000155c PhCI869PM_860_68.elf CPhDiagnostics_Base::PhDiagnosticsTableCleared(teDiagErrorCode*)
0000158c PhCI869PM_860_68.elf CPhOLU_Base::PrepareForFirmwareDownload(trHWFAddress const*, unsigned long, eOLUStatus*)
000015c4 PhCI869PM_860_68.elf CPhOLU_Base::PrepareForApplicationStop(trHWFAddress const*, eOLUStatus*)
000015f8 PhCI869PM_860_68.elf CPhOLU_Base::ResumeOperation(trHWFAddress const*, eOLUStatus*)
0000162c PhCI869PM_860_68.elf CPhOLU_Base::PhResponsibilityForOLU(trHWFAddress const*, eOLUStatus*)
00001660 PhCI869PM_860_68.elf CPhOLU_Base::PrepareForLeavingOLU(trHWFAddress const*, eOLUStatus*)
00001694 PhCI869PM_860_68.elf CPhOLU_Base::PrepareForAppAndConfigDownload(trHWFAddress const*, eOLUStatus*)
000016c8 PhCI869PM_860_68.elf CPhOLU_Base1::PrepareForFirmwareDownload(trHWFAddress const*, unsigned long, eOLUStatus*)
00001700 PhCI869PM_860_68.elf CPhOLU_Base1::PrepareForApplicationStop(trHWFAddress const*, eOLUStatus*)
00001734 PhCI869PM_860_68.elf CPhOLU_Base1::ResumeOperation(trHWFAddress const*, eOLUStatus*)
00001768 PhCI869PM_860_68.elf CPhOLU_Base1::PhResponsibilityForOLU(trHWFAddress const*, eOLUStatus*)
0000179c PhCI869PM_860_68.elf CPhOLU_Base1::PrepareForLeavingOLU(trHWFAddress const*, eOLUStatus*)
000017d0 PhCI869PM_860_68.elf CPhOLU_Base1::PrepareForAppAndConfigDownload(trHWFAddress const*, eOLUStatus*)
00001804 PhCI869PM_860_68.elf CPhOLU_Base1::OLUEnablePhCom(trHWFAddress const*, eOLUStatus*)
00001838 PhCI869PM_860_68.elf CPhOLU_Base1::OLUDisablePhCom(trHWFAddress const*, eOLUStatus*)
0000186c PhCI869PM_860_68.elf CPhOLU_Base1::InformPhIsInSwitch(trHWFAddress const*, eOLUStatus*)
000018a4 PhCI869PM_860_68.elf CPhCommon_Base::~CPhCommon_Base()
00001920 PhCI869PM_860_68.elf CPhCommon_Base::~CPhCommon_Base()
0000199c PhCI869PM_860_68.elf CPhCommon_Base::~CPhCommon_Base()
00001a18 PhCI869PM_860_68.elf CPMLogger::CPMLogger()
00001a70 PhCI869PM_860_68.elf CPMLogger::CPMLogger()
00001ac4 PhCI869PM_860_68.elf CPMLogger::SetInterfacePointers(ISystemUtilitiesCallback4*)
00001ad4 PhCI869PM_860_68.elf CPMLogger::UpdateTraceSettings(unsigned long)
00001ae4 PhCI869PM_860_68.elf CPMLogger::GetTraceSettings()
00001af8 PhCI869PM_860_68.elf CPMLogger::UpdateStrHeader()
00001b78 PhCI869PM_860_68.elf CPMLogger::SetCIModulePos(int)
00001ba8 PhCI869PM_860_68.elf CPMLogger::NotifyUser(unsigned long, unsigned long)
00001c48 PhCI869PM_860_68.elf CPMLogger::PrintConfBuffer(char const*, char const*, int, tePMMsgClassMask)
00001d64 PhCI869PM_860_68.elf CPMLogger::Trace(char const*, tePMMsgClassMask)
00001e60 PhCI869PM_860_68.elf CPMLogger::Warning(char const*, int)
00001f40 PhCI869PM_860_68.elf CPMLogger::Warning(char const*)
0000201c PhCI869PM_860_68.elf CPMLogger::Info(char const*, int)
000020fc PhCI869PM_860_68.elf CPMLogger::Info(char const*)
000021d8 PhCI869PM_860_68.elf CPMLogger::Error(char const*, int)
000022b8 PhCI869PM_860_68.elf CPMLogger::Error(char const*)
00002394 PhCI869PM_860_68.elf CPMLogger::HwAddrToString(char*, char const*, trHWFAddress)
000024a0 PhCI869PM_860_68.elf CPMLogger::Trace(char const*, trHWFAddress, tePMMsgClassMask)
000025f0 PhCI869PM_860_68.elf CPMLogger::~CPMLogger()
00002634 PhCI869PM_860_68.elf CPMLogger::~CPMLogger()
00002674 PhCI869PM_860_68.elf CPMLogger::~CPMLogger()
000026b0 PhCI869PM_860_68.elf CListOfRegistrationInfo::CListOfRegistrationInfo(CPMLogger*)
000026dc PhCI869PM_860_68.elf CListOfRegistrationInfo::CListOfRegistrationInfo(CPMLogger*)
00002708 PhCI869PM_860_68.elf CListOfRegistrationInfo::~CListOfRegistrationInfo()
0000275c PhCI869PM_860_68.elf CListOfRegistrationInfo::~CListOfRegistrationInfo()
000027b0 PhCI869PM_860_68.elf CListOfRegistrationInfo::Init(IHeapCallback*, int)
000027d8 PhCI869PM_860_68.elf CListOfRegistrationInfo::CompareRegistrationInfo(void const*, void const*)
00002870 PhCI869PM_860_68.elf CListOfRegistrationInfo::Find(unsigned long)
000028d4 PhCI869PM_860_68.elf CListOfRegistrationInfo::Item(unsigned long)
00002924 PhCI869PM_860_68.elf CListOfRegistrationInfo::Clear()
0000293c PhCI869PM_860_68.elf CListOfRegistrationInfo::AllIOConnectionStarted()
000029e0 PhCI869PM_860_68.elf CListOfRegistrationInfo::ClearSentFlag()
00002a64 PhCI869PM_860_68.elf CListOfAllocatedItems::Item(unsigned long)
00002aa4 PhCI869PM_860_68.elf CListOfAllocatedItems::GetArray(unsigned long*)
00002abc PhCI869PM_860_68.elf CListOfAllocatedItems::AllocateMemory(unsigned long)
00002b10 PhCI869PM_860_68.elf CListOfAllocatedItems::CListOfAllocatedItems(unsigned long, void*, int)
00002b8c PhCI869PM_860_68.elf CListOfAllocatedItems::CListOfAllocatedItems(unsigned long, void*, int)
00002c08 PhCI869PM_860_68.elf CListOfAllocatedItems::FreeMemory(unsigned char*)
00002c4c PhCI869PM_860_68.elf CListOfAllocatedItems::~CListOfAllocatedItems()
00002c6c PhCI869PM_860_68.elf CListOfAllocatedItems::~CListOfAllocatedItems()
00002c8c PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PerformSwitchover(trHWFAddress, teHWFErrorCode*)
00002c94 PhCI869PM_860_68.elf CPhPMBase::PerformSwitchover(trHWFAddress, teHWFErrorCode*)
00002cf0 PhCI869PM_860_68.elf CPhPMBase::ProcessHWunit(unsigned char**, unsigned long*)
00002cfc PhCI869PM_860_68.elf CPhPMBase::ProcessSubHwUnitStatus(trHWFAddress, unsigned long*, unsigned long*, bool)
00002d08 PhCI869PM_860_68.elf CPhPMBase::SetAllIoConnectionStarted()
00002d98 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PrepareForFirmwareDownload(trHWFAddress const*, unsigned long, eOLUStatus*)
00002da0 PhCI869PM_860_68.elf CPhPMBase::PrepareForFirmwareDownload(trHWFAddress const*, unsigned long, eOLUStatus*)
00002de8 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PrepareForAppAndConfigDownload(trHWFAddress const*, eOLUStatus*)
00002df0 PhCI869PM_860_68.elf CPhPMBase::PrepareForAppAndConfigDownload(trHWFAddress const*, eOLUStatus*)
00002e28 PhCI869PM_860_68.elf CPhPMBase::ProtocolSpecificConfigurationValues(trHWFAddress, bool&, unsigned long&, unsigned long&, unsigned short&, unsigned long&)
00002e38 PhCI869PM_860_68.elf CPhPMBase::SwitchoverThread()
00002fc4 PhCI869PM_860_68.elf spawnSwitchoverThread(int, int, int, int)
00002fd4 PhCI869PM_860_68.elf CPhPMBase::DriverForCIModuleClosed(int)
00003018 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PrepareForLeavingOLU(trHWFAddress const*, eOLUStatus*)
00003020 PhCI869PM_860_68.elf CPhPMBase::PrepareForLeavingOLU(trHWFAddress const*, eOLUStatus*)
000030f8 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PhResponsibilityForOLU(trHWFAddress const*, eOLUStatus*)
00003104 PhCI869PM_860_68.elf CPhPMBase::PhResponsibilityForOLU(trHWFAddress const*, eOLUStatus*)
000031d4 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::ResumeOperation(trHWFAddress const*, eOLUStatus*)
000031dc PhCI869PM_860_68.elf CPhPMBase::ResumeOperation(trHWFAddress const*, eOLUStatus*)
000032ac PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PrepareForApplicationStop(trHWFAddress const*, eOLUStatus*)
000032b4 PhCI869PM_860_68.elf CPhPMBase::PrepareForApplicationStop(trHWFAddress const*, eOLUStatus*)
00003384 PhCI869PM_860_68.elf CPhPMBase::HandleThreadSupervision()
00003518 PhCI869PM_860_68.elf CPhPMBase::WaitForAllIOConnectionsToStart(teHWFErrorCode*)
000035c4 PhCI869PM_860_68.elf CPhPMBase::HandleCItoCIMessages(int, unsigned long, ENUM_TRANSCEIVER_MSG_TYPE, unsigned char*, unsigned long)
000036e0 PhCI869PM_860_68.elf CPhPMBase::WriteToDriver(int, ENUM_TRANSCEIVER_MSG_TYPE, unsigned char*, unsigned long)
000037e8 PhCI869PM_860_68.elf CPhPMBase::HandleSwitchoverRequest(int)
00003a54 PhCI869PM_860_68.elf CPhPMBase::TimeSynch(TRANSCEIVER_TIMESYNCHDATA*)
00003c30 PhCI869PM_860_68.elf CPhPMBase::Init(trHWFAddress, teHWFErrorCode*)
0000416c PhCI869PM_860_68.elf CPhPMBase::HandleStatusMsg(TRANSCEIVER_STATUSDATA*, unsigned long, bool)
000044f0 PhCI869PM_860_68.elf CPhPMBase::HandleHighPrioCIMessagesThread()
000046f4 PhCI869PM_860_68.elf spawnHighPriorityMessgeHandleThread(int, int, int, int)
00004704 PhCI869PM_860_68.elf CPhPMBase::RestartCIModule()
00004944 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::StartUsingDevice(trHWFAddress, teHWFErrorCode*)
00004950 PhCI869PM_860_68.elf CPhPMBase::StartUsingDevice(trHWFAddress, teHWFErrorCode*)
00004a40 PhCI869PM_860_68.elf CPhPMBase::SendCommand(int, int, teHWFErrorCode*)
00004b28 PhCI869PM_860_68.elf CPhPMBase::SendLogSettings(int, teHWFErrorCode*)
00004c38 PhCI869PM_860_68.elf CPhPMBase::SendAllIOConnectionStarted(int, teHWFErrorCode*)
00004d10 PhCI869PM_860_68.elf CPhPMBase::SendLastNodeConfigured(int)
00004dac PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode*)
00004db8 PhCI869PM_860_68.elf CPhPMBase::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode*)
00004f9c PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PrepareForTermination(teHWFErrorCode*)
00004fa8 PhCI869PM_860_68.elf CPhPMBase::PrepareForTermination(teHWFErrorCode*)
000051bc PhCI869PM_860_68.elf CPhPMBase::GetHWUnitType(trHWFAddress)
0000542c PhCI869PM_860_68.elf CPhPMBase::SendStartUsingIOConnection(PH_HWFAddress*, int, teHWFErrorCode*)
00005544 PhCI869PM_860_68.elf CPhPMBase::SendStartUsingForAllUnsentIOConnections(int)
000056a0 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode*)
000056ac PhCI869PM_860_68.elf CPhPMBase::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode*)
000058f0 PhCI869PM_860_68.elf CPhPMBase::SendStartIOConnectionForAllIOConnections(int)
000059ec PhCI869PM_860_68.elf CListOfAllocatedItems::PutArray(unsigned char*, unsigned long)
00005ad0 PhCI869PM_860_68.elf CListOfAllocatedItems::Add(PH_HWFAddress*, unsigned long, unsigned long, AI_STATUS, ENUM_ELEMENT_TYPE)
00005be4 PhCI869PM_860_68.elf CPhPMBase::SendIoConnectionAddressList(int)
00005eb4 PhCI869PM_860_68.elf CPhPMBase::WaitForConfigReply(int, unsigned long)
00005ff0 PhCI869PM_860_68.elf CPhPMBase::WaitOnIOConAddrFromCI(int, unsigned long)
00006128 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PerformFailover(trHWFAddress, teHWFErrorCode*)
00006130 PhCI869PM_860_68.elf CPhPMBase::PerformFailover(trHWFAddress, teHWFErrorCode*)
000061ac PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::GetStatus(trHWFAddress, teHWFUnitKind, unsigned long*, unsigned long*, teHWFErrorCode*)
000061b4 PhCI869PM_860_68.elf CPhPMBase::GetStatus(trHWFAddress, teHWFUnitKind, unsigned long*, unsigned long*, teHWFErrorCode*)
0000629c PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::KickWatchdog(unsigned short*, teHWFErrorCode*)
000062a4 PhCI869PM_860_68.elf CPhPMBase::KickWatchdog(unsigned short*, teHWFErrorCode*)
0000634c PhCI869PM_860_68.elf CPhPMBase::ConfigureWatchdog(trHWFAddress, int)
00006514 PhCI869PM_860_68.elf CPhPMBase::HandlePMCommand(int, teHWFErrorCode*)
00006678 PhCI869PM_860_68.elf CPhPMBase::CheckSystemVariables()
000068b8 PhCI869PM_860_68.elf CPhPMBase::CheckCompatibility(trHWFAddress const*, tFirmwareInfo, unsigned long*, unsigned long*)
00006944 PhCI869PM_860_68.elf CPhPMBase::CheckRedundancyState(trHWFAddress, teHWFErrorCode*)
00006b7c PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode*)
00006b88 PhCI869PM_860_68.elf CPhPMBase::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode*)
00006d58 PhCI869PM_860_68.elf CPhPMBase::SendConfRedMode(int)
00006ed8 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::ReleaseDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
00006ee0 PhCI869PM_860_68.elf CPhPMBase::ReleaseDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
00006f58 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::ObtainDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
00006f60 PhCI869PM_860_68.elf CPhPMBase::ObtainDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
00006fdc PhCI869PM_860_68.elf CPhPMBase::SetCommonCallbackInterface(ICommonCallback*)
000071e8 PhCI869PM_860_68.elf CListOfRegistrationInfo::PutArray(unsigned char*, unsigned long)
00007318 PhCI869PM_860_68.elf CListOfRegistrationInfo::Add(PH_HWFAddress, unsigned long)
000074bc PhCI869PM_860_68.elf CListOfRegistrationInfo::Add(trHWFAddress, unsigned long)
0000752c PhCI869PM_860_68.elf CListOfRegistrationInfo::Find(trHWFAddress)
000075d0 PhCI869PM_860_68.elf CPhPMBase::RegisterHWUnitWithIOC(trHWFAddress, unsigned int)
00007a00 PhCI869PM_860_68.elf CPhPMBase::SendConfigDataToCIModule(trHWFAddress, ENUM_ELEMENT_TYPE, int)
00007f14 PhCI869PM_860_68.elf CPhPMBase::TraverseHWTree(trHWFAddress, int, CPhPMBase::tePhPMTraverseTreeMode, unsigned long, unsigned long, bool)
00008414 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode*)
00008420 PhCI869PM_860_68.elf CPhPMBase::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode*)
00008904 PhCI869PM_860_68.elf CPhPMBase::CommonPhResponsibility(trHWFAddress, teHWFErrorCode*)
00008ebc PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode*)
00008ec8 PhCI869PM_860_68.elf CPhPMBase::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode*)
00009308 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::PhResponsibility(trHWFAddress, teHWFErrorCode*)
00009314 PhCI869PM_860_68.elf CPhPMBase::PhResponsibility(trHWFAddress, teHWFErrorCode*)
00009824 PhCI869PM_860_68.elf CListOfRegistrationInfo::Find(PH_HWFAddress)
000098c8 PhCI869PM_860_68.elf CPhPMBase::HandleNodeConfigCompleted(CListOfAllocatedItems*)
00009ac0 PhCI869PM_860_68.elf CPhPMBase::SupervisionThread()
0000a0ac PhCI869PM_860_68.elf spawnSupervisionThread(int, int, int, int)
0000a0b8 PhCI869PM_860_68.elf CListOfRegistrationInfo::Remove(PH_HWFAddress)
0000a18c PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::RemoveIoConnection(unsigned long, teHWFErrorCode*)
0000a198 PhCI869PM_860_68.elf CPhPMBase::RemoveIoConnection(unsigned long, teHWFErrorCode*)
0000a328 PhCI869PM_860_68.elf CPhPMBase::CPhPMBase()
0000a494 PhCI869PM_860_68.elf CPhPMBase::CPhPMBase()
0000a600 PhCI869PM_860_68.elf CPhPMBase::~CPhPMBase()
0000a768 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::~CPhPMBase()
0000a770 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::~CPhPMBase()
0000a778 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::~CPhPMBase()
0000a780 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::~CPhPMBase()
0000a78c PhCI869PM_860_68.elf CPhPMBase::~CPhPMBase()
0000a8fc PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::~CPhPMBase()
0000a904 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::~CPhPMBase()
0000a90c PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::~CPhPMBase()
0000a914 PhCI869PM_860_68.elf non-virtual thunk to CPhPMBase::~CPhPMBase()
0000a920 PhCI869PM_860_68.elf CPhPMBase::~CPhPMBase()
0000aa88 PhCI869PM_860_68.elf CDriverHandler::Init(trHWFAddress const*, IDriverFactoryCallback*, IVOSCallback2*, IStatusCallback1*, IHeapCallback*, int, int, int, int, unsigned long, unsigned long, teHWFErrorCode*)
0000ada4 PhCI869PM_860_68.elf CDriverHandler::ReadyForUse()
0000adb4 PhCI869PM_860_68.elf CDriverHandler::Exit()
0000af58 PhCI869PM_860_68.elf CDriverHandler::~CDriverHandler()
0000af64 PhCI869PM_860_68.elf CDriverHandler::~CDriverHandler()
0000af70 PhCI869PM_860_68.elf CDriverHandler::CreateTransactionIdAndEvent(ICIGDriverCallback*, unsigned long*, unsigned long*)
0000b0c0 PhCI869PM_860_68.elf CDriverHandler::GetDriverInfoPtr(dhdriverinfo**, dhdriverinfo**)
0000b118 PhCI869PM_860_68.elf CDriverHandler::EnableTimeSync(int, eErrorCodes*)
0000b2d0 PhCI869PM_860_68.elf CDriverHandler::SetPrimary(int)
0000b33c PhCI869PM_860_68.elf CDriverHandler::IsRedundant()
0000b358 PhCI869PM_860_68.elf CDriverHandler::HasGotBusError(int)
0000b3a8 PhCI869PM_860_68.elf CDriverHandler::ModuleAvailable(int)
0000b4a8 PhCI869PM_860_68.elf CDriverHandler::HasGotConfigReply(int)
0000b4f4 PhCI869PM_860_68.elf CDriverHandler::SetConfigReply(int, bool)
0000b530 PhCI869PM_860_68.elf CDriverHandler::GetStatusIntSempahore(int)
0000b5a8 PhCI869PM_860_68.elf CDriverHandler::PutStatusIntSempahore(int)
0000b5f0 PhCI869PM_860_68.elf CDriverHandler::GetPrimaryCIPos()
0000b60c PhCI869PM_860_68.elf CDriverHandler::GetBackupCIPos()
0000b628 PhCI869PM_860_68.elf CDriverHandler::GetRWMStartAddress(int)
0000b66c PhCI869PM_860_68.elf CDriverHandler::AtLeastOneDriverIsOpen()
0000b6dc PhCI869PM_860_68.elf CDriverHandler::IsReqRunVerEqual(int)
0000b728 PhCI869PM_860_68.elf CDriverHandler::ObtainDPM(unsigned long)
0000b860 PhCI869PM_860_68.elf CDriverHandler::ReleaseDPM(unsigned long)
0000b998 PhCI869PM_860_68.elf CDriverHandler::DriverIsOpen(int)
0000b9b0 PhCI869PM_860_68.elf CDriverHandler::GetBackupAck()
0000b9c0 PhCI869PM_860_68.elf CDriverHandler::GetPrimaryAck()
0000b9d0 PhCI869PM_860_68.elf CDriverHandler::SetBackupAck()
0000b9e4 PhCI869PM_860_68.elf CDriverHandler::SetPrimaryAck()
0000b9f8 PhCI869PM_860_68.elf CDriverHandler::SetRWError(int)
0000ba40 PhCI869PM_860_68.elf CDriverHandler::TakeAllChannelSem(dhdriverinfo*)
0000bb08 PhCI869PM_860_68.elf CDriverHandler::GiveAllChannelSem(dhdriverinfo*)
0000bba8 PhCI869PM_860_68.elf CDriverHandler::PrintStatusRegisters(dhdriverinfo*, int)
0000bcd8 PhCI869PM_860_68.elf CDriverHandler::RaiseBecomePrimaryInterrupt(int)
0000be74 PhCI869PM_860_68.elf CDriverHandler::EnableFFH(dhdriverinfo*)
0000bf68 PhCI869PM_860_68.elf CDriverHandler::KickWatchDog(unsigned short*, teHWFErrorCode*)
0000c578 PhCI869PM_860_68.elf CDriverHandler::GetSwitchoverInfo(int, eErrorCodes*, unsigned long*, eErrorCodes*, unsigned long*)
0000c848 PhCI869PM_860_68.elf CDriverHandler::WaitForStatusInt(int, bool, unsigned long, eErrorCodes*)
0000c9f8 PhCI869PM_860_68.elf CDriverHandler::GetFirmwareInfo(int, tFirmwareInfo*, int, eErrorCodes*)
0000cc6c PhCI869PM_860_68.elf CDriverHandler::ResetCIModule(int, eErrorCodes*)
0000ce18 PhCI869PM_860_68.elf CDriverHandler::SwitchOver(int*)
0000cf04 PhCI869PM_860_68.elf CDriverHandler::GetStatusRegisters(dhdriverinfo*, unsigned long*)
0000d1d0 PhCI869PM_860_68.elf CDriverHandler::GetStatus(bool, trHWFAddress, teHWFUnitKind, unsigned long*, unsigned long*, teHWFErrorCode*)
0000d49c PhCI869PM_860_68.elf CDriverHandler::CloseCIGDriver(dhdriverinfo*, bool, eErrorCodes*)
0000db80 PhCI869PM_860_68.elf CDriverHandler::Close(int, bool)
0000dd58 PhCI869PM_860_68.elf CDriverHandler::CheckCompatibility(trHWFAddress const*, tFirmwareInfo, unsigned long*, unsigned long*)
0000e1ac PhCI869PM_860_68.elf CDriverHandler::OpenCIGDriver(dhdriverinfo*, bool, bool*, eErrorCodes*)
0000e7d0 PhCI869PM_860_68.elf CDriverHandler::OpenForHotInsert(int*, bool*, bool*)
0000ea1c PhCI869PM_860_68.elf CDriverHandler::Open(int, bool, int*)
0000ec74 PhCI869PM_860_68.elf CDriverHandler::UpdateRedundancyInfo(int, int, int, teHWFErrorCode*)
0000ef4c PhCI869PM_860_68.elf CDriverHandler::Write(int, unsigned long, ENUM_TRANSCEIVER_MSG_TYPE, unsigned char*, unsigned long, eErrorCodes*)
0000f410 PhCI869PM_860_68.elf CDriverHandler::SendBackupToCI(int, int)
0000f4e4 PhCI869PM_860_68.elf CDriverHandler::SendPrimaryToCI(int, int)
0000f5bc PhCI869PM_860_68.elf CDriverHandler::SendOLUStateToCI(int, ENUM_OLU_STATE)
0000f70c PhCI869PM_860_68.elf CDriverHandler::SendWatchdogStateToCI(int, WD_STATE, teHWFErrorCode*)
0000f850 PhCI869PM_860_68.elf CDriverHandler::CDriverHandler(CPMLogger*)
0000fa68 PhCI869PM_860_68.elf CDriverHandler::CDriverHandler(CPMLogger*)
0000fc84 PhCI869PM_860_68.elf CDriverHandler::Read(int, unsigned long, ENUM_TRANSCEIVER_MSG_TYPE*, unsigned char**, unsigned long*, unsigned long, eErrorCodes*)
00010388 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::AddRef()
00010390 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::AddRef()
00010398 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::AddRef()
000103a0 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::AddRef()
000103a8 PhCI869PM_860_68.elf CPhAF100PM::AddRef()
000103c4 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::Release()
000103cc PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::Release()
000103d4 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::Release()
000103dc PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::Release()
000103e4 PhCI869PM_860_68.elf CPhAF100PM::Release()
00010450 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::QueryInterface(_GUID const&, void**)
00010458 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::QueryInterface(_GUID const&, void**)
00010460 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::QueryInterface(_GUID const&, void**)
00010468 PhCI869PM_860_68.elf non-virtual thunk to CPhAF100PM::QueryInterface(_GUID const&, void**)
00010474 PhCI869PM_860_68.elf CPhAF100PM::QueryInterface(_GUID const&, void**)
00010580 PhCI869PM_860_68.elf IUnknown::IUnknown()
000105d8 PhCI869PM_860_68.elf IPhCommon::IPhCommon()
0001063c PhCI869PM_860_68.elf IUnknown::~IUnknown()
000106ac PhCI869PM_860_68.elf IPhConfig1::~IPhConfig1()
00010728 PhCI869PM_860_68.elf CPhConfig_Base1::~CPhConfig_Base1()
000107a4 PhCI869PM_860_68.elf IPhConfig1::~IPhConfig1()
00010820 PhCI869PM_860_68.elf IPhConfig1::~IPhConfig1()
0001089c PhCI869PM_860_68.elf IUnknown::~IUnknown()
0001090c PhCI869PM_860_68.elf IUnknown::~IUnknown()
0001097c PhCI869PM_860_68.elf CPhConfig_Base1::~CPhConfig_Base1()
000109f8 PhCI869PM_860_68.elf IPhClient::~IPhClient()
00010a74 PhCI869PM_860_68.elf CPhClient_Base::~CPhClient_Base()
00010af0 PhCI869PM_860_68.elf IPhClient::~IPhClient()
00010b6c PhCI869PM_860_68.elf IPhClient::~IPhClient()
00010be8 PhCI869PM_860_68.elf CPhClient_Base::~CPhClient_Base()
00010c64 PhCI869PM_860_68.elf IPhClient1::~IPhClient1()
00010ce0 PhCI869PM_860_68.elf CPhClient_Base1::~CPhClient_Base1()
00010d5c PhCI869PM_860_68.elf IPhClient1::~IPhClient1()
00010dd8 PhCI869PM_860_68.elf IPhClient1::~IPhClient1()
00010e54 PhCI869PM_860_68.elf CPhClient_Base1::~CPhClient_Base1()
00010ed0 PhCI869PM_860_68.elf IPhStatus1::~IPhStatus1()
00010f4c PhCI869PM_860_68.elf CPhStatus_Base1::~CPhStatus_Base1()
00010fc8 PhCI869PM_860_68.elf IPhStatus1::~IPhStatus1()
00011044 PhCI869PM_860_68.elf IPhStatus1::~IPhStatus1()
000110c0 PhCI869PM_860_68.elf CPhStatus_Base1::~CPhStatus_Base1()
0001113c PhCI869PM_860_68.elf IPhIOAccess::~IPhIOAccess()
000111b8 PhCI869PM_860_68.elf CPhIOAccess_Base::~CPhIOAccess_Base()
00011234 PhCI869PM_860_68.elf IPhIOAccess::~IPhIOAccess()
000112b0 PhCI869PM_860_68.elf IPhIOAccess::~IPhIOAccess()
0001132c PhCI869PM_860_68.elf CPhIOAccess_Base::~CPhIOAccess_Base()
000113a8 PhCI869PM_860_68.elf IPhDiagnostics::~IPhDiagnostics()
00011424 PhCI869PM_860_68.elf CPhDiagnostics_Base::~CPhDiagnostics_Base()
000114a0 PhCI869PM_860_68.elf IPhDiagnostics::~IPhDiagnostics()
0001151c PhCI869PM_860_68.elf IPhDiagnostics::~IPhDiagnostics()
00011598 PhCI869PM_860_68.elf CPhDiagnostics_Base::~CPhDiagnostics_Base()
00011614 PhCI869PM_860_68.elf IPhOLU::~IPhOLU()
00011690 PhCI869PM_860_68.elf CPhOLU_Base::~CPhOLU_Base()
0001170c PhCI869PM_860_68.elf IPhOLU::~IPhOLU()
00011788 PhCI869PM_860_68.elf IPhOLU::~IPhOLU()
00011804 PhCI869PM_860_68.elf CPhOLU_Base::~CPhOLU_Base()
00011880 PhCI869PM_860_68.elf IPhOLU1::~IPhOLU1()
000118fc PhCI869PM_860_68.elf CPhOLU_Base1::~CPhOLU_Base1()
00011978 PhCI869PM_860_68.elf IPhOLU1::~IPhOLU1()
000119f4 PhCI869PM_860_68.elf IPhOLU1::~IPhOLU1()
00011a70 PhCI869PM_860_68.elf CPhOLU_Base1::~CPhOLU_Base1()
00011aec PhCI869PM_860_68.elf IPhCommon::~IPhCommon()
00011b68 PhCI869PM_860_68.elf IPhCommon::~IPhCommon()
00011be4 PhCI869PM_860_68.elf IPhCommon::~IPhCommon()
00011c5c PhCI869PM_860_68.elf CompanyName
00011c60 PhCI869PM_860_68.elf ProductName
00011c6c PhCI869PM_860_68.elf ProductVersion
00011ce0 PhCI869PM_860_68.elf IID_IPhCommonCB
00011cf0 PhCI869PM_860_68.elf IID_IPhConfigCB
00011d00 PhCI869PM_860_68.elf IID_IPhConfigCB1
00011d10 PhCI869PM_860_68.elf IID_IPhIOAccessCB
00011d20 PhCI869PM_860_68.elf IID_IPhExternalConfigCB1
00011d30 PhCI869PM_860_68.elf IID_IPhExternalConfigCB2
00011d40 PhCI869PM_860_68.elf IID_IPhExternalConfigCB3
00011d50 PhCI869PM_860_68.elf IID_IPhOLUCB
00011d60 PhCI869PM_860_68.elf IID_IPhCommon
00011d70 PhCI869PM_860_68.elf IID_IPhConfig1
00011d80 PhCI869PM_860_68.elf IID_IPhStatus1
00011d90 PhCI869PM_860_68.elf IID_IPhClient
00011da0 PhCI869PM_860_68.elf IID_IPhClient1
00011db0 PhCI869PM_860_68.elf IID_IPhDiagnostics
00011dc0 PhCI869PM_860_68.elf IID_IPhIOAccess
00011dd0 PhCI869PM_860_68.elf IID_IPhSafeConfig
00011de0 PhCI869PM_860_68.elf IID_IPhSafeConfig1
00011df0 PhCI869PM_860_68.elf IID_IPhSafeConfig2
00011e00 PhCI869PM_860_68.elf IID_IPhSimulation
00011e10 PhCI869PM_860_68.elf IID_IPhOLU
00011e20 PhCI869PM_860_68.elf IID_IPhOLU1
00011e30 PhCI869PM_860_68.elf IID_IHeapCallback
00011e40 PhCI869PM_860_68.elf IID_ISystemUtilitiesCallback
00011e50 PhCI869PM_860_68.elf IID_ISystemUtilitiesCallback1
00011e60 PhCI869PM_860_68.elf IID_ISystemUtilitiesCallback2
00011e70 PhCI869PM_860_68.elf IID_ISystemUtilitiesCallback3
00011e80 PhCI869PM_860_68.elf IID_ISystemUtilitiesCallback4
00011e90 PhCI869PM_860_68.elf IID_IEventMgrCallback
00011ea0 PhCI869PM_860_68.elf IID_IEventMgrCallback1
00011eb0 PhCI869PM_860_68.elf IID_ISysClockCallback
00011ec0 PhCI869PM_860_68.elf IID_ISysClockCallback1
00011ed0 PhCI869PM_860_68.elf IID_ISysClockCallback2
00011ee0 PhCI869PM_860_68.elf IID_ISysClockCallback3
00011ef0 PhCI869PM_860_68.elf IID_INetwClockSynchCallback
00011f00 PhCI869PM_860_68.elf IID_IConfigCBCallback1
00011f10 PhCI869PM_860_68.elf IID_IConfigCBCallback2
00011f20 PhCI869PM_860_68.elf IID_IConfigCBCallback3
00011f30 PhCI869PM_860_68.elf IID_IExternalConfigCBCallback
00011f40 PhCI869PM_860_68.elf IID_IExternalConfigCBCallback2
00011f50 PhCI869PM_860_68.elf IID_IExternalConfigCBCallback3
00011f60 PhCI869PM_860_68.elf IID_IExternalConfigCBCallback4
00011f70 PhCI869PM_860_68.elf IID_IMessagesCBCallback
00011f80 PhCI869PM_860_68.elf IID_IAIPAccessCBCallback
00011f90 PhCI869PM_860_68.elf IID_IOLUCBCallback
00011fa0 PhCI869PM_860_68.elf IID_ISystemUtilitiesCBCallback1
00011fb0 PhCI869PM_860_68.elf IID_IConfigCallback1
00011fc0 PhCI869PM_860_68.elf IID_IConfigCallback2
00011fd0 PhCI869PM_860_68.elf IID_IStatusCallback1
00011fe0 PhCI869PM_860_68.elf IID_IGenClientCallback
00011ff0 PhCI869PM_860_68.elf IID_IGenClientCallback1
00012000 PhCI869PM_860_68.elf IID_IIACClientCallback
00012010 PhCI869PM_860_68.elf IID_IDriverFactoryCallback
00012020 PhCI869PM_860_68.elf IID_IDiagnosticsCallback
00012030 PhCI869PM_860_68.elf IID_ISafeConfigCallback
00012040 PhCI869PM_860_68.elf IID_ISafeConfigCallback1
00012050 PhCI869PM_860_68.elf IID_ISafeConfigCallback2
00012060 PhCI869PM_860_68.elf IID_ICRCCallback
00012070 PhCI869PM_860_68.elf IID_IIOAccessCallback
00012080 PhCI869PM_860_68.elf IID_CriticalRegionCallback
00012090 PhCI869PM_860_68.elf IID_VOSExceptionCallback
000120a0 PhCI869PM_860_68.elf IID_DrvCommonCallback
000120b0 PhCI869PM_860_68.elf IID_ProtectedMirroredHeapCallback
000120c0 PhCI869PM_860_68.elf IID_SharedMirroredHeapCallback
000120d0 PhCI869PM_860_68.elf IID_TemporaryMirroredHeapCallback
000120e0 PhCI869PM_860_68.elf IID_IRestrictedVOSCallback
000120f0 PhCI869PM_860_68.elf IID_IVarServerCallback
00012100 PhCI869PM_860_68.elf IID_IVarServerCallback1
00012110 PhCI869PM_860_68.elf IID_ISOCKETCallback
00012120 PhCI869PM_860_68.elf IID_ISOCKETCallback1
00012130 PhCI869PM_860_68.elf IID_IVOSCallback2
00012140 PhCI869PM_860_68.elf CPMLogger::m_PhClassLibIdStr
00015340 V vtable for CPhAF100PM PhCI869PM_860_68.elf 
00015498 V vtable for CPhOLU_Base1 PhCI869PM_860_68.elf 
000154d8 V vtable for CPhOLU_Base PhCI869PM_860_68.elf 
00015510 V vtable for CPhDiagnostics_Base PhCI869PM_860_68.elf 
00015538 V vtable for CPhIOAccess_Base PhCI869PM_860_68.elf 
00015560 V vtable for CPhStatus_Base1 PhCI869PM_860_68.elf 
00015588 V vtable for CPhClient_Base1 PhCI869PM_860_68.elf 
000155f0 V vtable for CPhClient_Base PhCI869PM_860_68.elf 
00015640 V vtable for CPhConfig_Base1 PhCI869PM_860_68.elf 
00015688 V vtable for CPhCommon_Base PhCI869PM_860_68.elf 
000156b0 V vtable for IPhConfig1 PhCI869PM_860_68.elf 
000156f8 V vtable for IUnknown PhCI869PM_860_68.elf 
00015718 V vtable for IPhClient PhCI869PM_860_68.elf 
00015768 V vtable for IPhClient1 PhCI869PM_860_68.elf 
000157d0 V vtable for IPhStatus1 PhCI869PM_860_68.elf 
000157f8 V vtable for IPhIOAccess PhCI869PM_860_68.elf 
00015820 V vtable for IPhDiagnostics PhCI869PM_860_68.elf 
00015848 V vtable for IPhOLU PhCI869PM_860_68.elf 
00015880 V vtable for IPhOLU1 PhCI869PM_860_68.elf 
000158c0 V vtable for IPhCommon PhCI869PM_860_68.elf 
000158e8 V vtable for CPMLogger PhCI869PM_860_68.elf 
000158f8 V vtable for CPhPMBase PhCI869PM_860_68.elf 
00015a50 PhCI869PM_860_68.elf CRTFuncTabBegin
00015a50 PhCI869PM_860_68.elf scprocs
00015a5c PhCI869PM_860_68.elf printf
00015a60 PhCI869PM_860_68.elf sprintf
00015a64 PhCI869PM_860_68.elf sscanf
00015a68 PhCI869PM_860_68.elf memcpy
00015a6c PhCI869PM_860_68.elf memset
00015a70 PhCI869PM_860_68.elf strcat
00015a74 PhCI869PM_860_68.elf strcmp
00015a78 PhCI869PM_860_68.elf strlen
00015a7c PhCI869PM_860_68.elf strncmp
00015a80 PhCI869PM_860_68.elf strncpy
00015a84 PhCI869PM_860_68.elf memchr
00015a88 PhCI869PM_860_68.elf memcmp
00015a8c PhCI869PM_860_68.elf memmove
00015a90 PhCI869PM_860_68.elf strchr
00015a94 PhCI869PM_860_68.elf strcoll
00015a98 PhCI869PM_860_68.elf strcpy
00015a9c PhCI869PM_860_68.elf strcspn
00015aa0 PhCI869PM_860_68.elf strncat
00015aa4 PhCI869PM_860_68.elf strpbrk
00015aa8 PhCI869PM_860_68.elf strrchr
00015aac PhCI869PM_860_68.elf strspn
00015ab0 PhCI869PM_860_68.elf strstr
00015ab4 PhCI869PM_860_68.elf strtok
00015ab8 PhCI869PM_860_68.elf strxfrm
00015abc PhCI869PM_860_68.elf strerror
00015ac0 PhCI869PM_860_68.elf pow
00015ac4 PhCI869PM_860_68.elf acos
00015ac8 PhCI869PM_860_68.elf asin
00015acc PhCI869PM_860_68.elf atan
00015ad0 PhCI869PM_860_68.elf atan2
00015ad4 PhCI869PM_860_68.elf ceil
00015ad8 PhCI869PM_860_68.elf cos
00015adc PhCI869PM_860_68.elf cosh
00015ae0 PhCI869PM_860_68.elf exp
00015ae4 PhCI869PM_860_68.elf fabs
00015ae8 PhCI869PM_860_68.elf floor
00015aec PhCI869PM_860_68.elf fmod
00015af0 PhCI869PM_860_68.elf frexp
00015af4 PhCI869PM_860_68.elf ldexp
00015af8 PhCI869PM_860_68.elf log
00015afc PhCI869PM_860_68.elf log10
00015b00 PhCI869PM_860_68.elf modf
00015b04 PhCI869PM_860_68.elf sin
00015b08 PhCI869PM_860_68.elf sinh
00015b0c PhCI869PM_860_68.elf sqrt
00015b10 PhCI869PM_860_68.elf tan
00015b14 PhCI869PM_860_68.elf tanh
00015b18 PhCI869PM_860_68.elf acosf
00015b1c PhCI869PM_860_68.elf asinf
00015b20 PhCI869PM_860_68.elf atanf
00015b24 PhCI869PM_860_68.elf atan2f
00015b28 PhCI869PM_860_68.elf ceilf
00015b2c PhCI869PM_860_68.elf cosf
00015b30 PhCI869PM_860_68.elf coshf
00015b34 PhCI869PM_860_68.elf expf
00015b38 PhCI869PM_860_68.elf fabsf
00015b3c PhCI869PM_860_68.elf floorf
00015b40 PhCI869PM_860_68.elf fmodf
00015b44 PhCI869PM_860_68.elf logf
00015b48 PhCI869PM_860_68.elf log10f
00015b4c PhCI869PM_860_68.elf powf
00015b50 PhCI869PM_860_68.elf sinf
00015b54 PhCI869PM_860_68.elf sinhf
00015b58 PhCI869PM_860_68.elf sqrtf
00015b5c PhCI869PM_860_68.elf tanf
00015b60 PhCI869PM_860_68.elf tanhf
00015b64 PhCI869PM_860_68.elf div_r
00015b68 PhCI869PM_860_68.elf labs
00015b6c PhCI869PM_860_68.elf strtol
00015b70 PhCI869PM_860_68.elf free
00015b74 PhCI869PM_860_68.elf abort
00015b78 PhCI869PM_860_68.elf abs
00015b7c PhCI869PM_860_68.elf atof
00015b80 PhCI869PM_860_68.elf atoi
00015b84 PhCI869PM_860_68.elf atol
00015b88 PhCI869PM_860_68.elf bsearch
00015b8c PhCI869PM_860_68.elf ldiv_r
00015b90 PhCI869PM_860_68.elf qsort
00015b94 PhCI869PM_860_68.elf rand
00015b98 PhCI869PM_860_68.elf srand
00015b9c PhCI869PM_860_68.elf strtod
00015ba0 PhCI869PM_860_68.elf strtoul
00015ba4 PhCI869PM_860_68.elf malloc
00015ba8 PhCI869PM_860_68.elf __assert
00015bac PhCI869PM_860_68.elf time
00015bb0 PhCI869PM_860_68.elf asctime
00015bb4 PhCI869PM_860_68.elf gmtime
00015bb8 PhCI869PM_860_68.elf clock
00015bbc PhCI869PM_860_68.elf ctime
00015bc0 PhCI869PM_860_68.elf difftime
00015bc4 PhCI869PM_860_68.elf localtime
00015bc8 PhCI869PM_860_68.elf mktime
00015bcc PhCI869PM_860_68.elf strftime
00015bd0 PhCI869PM_860_68.elf eventcollSem
00015bd4 PhCI869PM_860_68.elf intLock
00015bd8 PhCI869PM_860_68.elf intUnlock
00015bdc PhCI869PM_860_68.elf _fabs
00015be0 PhCI869PM_860_68.elf _ddec
00015be4 PhCI869PM_860_68.elf _d_mul
00015be8 PhCI869PM_860_68.elf __floatsidf
00015bec PhCI869PM_860_68.elf _d_sub
00015bf0 PhCI869PM_860_68.elf _d_add
00015bf4 PhCI869PM_860_68.elf __fixunsdfsi
00015bf8 PhCI869PM_860_68.elf __extendsfdf2
00015bfc PhCI869PM_860_68.elf __adddf3
00015c00 PhCI869PM_860_68.elf _dinc
00015c04 PhCI869PM_860_68.elf __fixdfsi
00015c08 PhCI869PM_860_68.elf _d_neg
00015c0c PhCI869PM_860_68.elf _d_dtof
00015c10 PhCI869PM_860_68.elf _f_qtof
00015c14 PhCI869PM_860_68.elf _dpfabs
00015c18 PhCI869PM_860_68.elf _d_dtoq
00015c1c PhCI869PM_860_68.elf _d_div
00015c20 PhCI869PM_860_68.elf __negdf2
00015c24 PhCI869PM_860_68.elf __divdf3
00015c28 PhCI869PM_860_68.elf __muldf3
00015c2c PhCI869PM_860_68.elf _d_dtoi
00015c30 PhCI869PM_860_68.elf _f_ftoq
00015c34 PhCI869PM_860_68.elf __truncdfsf2
00015c38 PhCI869PM_860_68.elf _fp_round
00015c3c PhCI869PM_860_68.elf _d_utod
00015c40 PhCI869PM_860_68.elf _d_qtod
00015c44 PhCI869PM_860_68.elf _d_dtou
00015c48 PhCI869PM_860_68.elf _d_itod
00015c4c PhCI869PM_860_68.elf __subdf3
00015c50 PhCI869PM_860_68.elf _f_ftod
00015c54 PhCI869PM_860_68.elf _d_feq
00015c58 PhCI869PM_860_68.elf __gtdf2
00015c5c PhCI869PM_860_68.elf _d_fne
00015c60 PhCI869PM_860_68.elf _d_cmp
00015c64 PhCI869PM_860_68.elf _d_flt
00015c68 PhCI869PM_860_68.elf _d_cmpe
00015c6c PhCI869PM_860_68.elf __nedf2
00015c70 PhCI869PM_860_68.elf _d_fgt
00015c74 PhCI869PM_860_68.elf _d_fle
00015c78 PhCI869PM_860_68.elf _d_fge
00015c7c PhCI869PM_860_68.elf _fdec
00015c80 PhCI869PM_860_68.elf _f_add
00015c84 PhCI869PM_860_68.elf __divsf3
00015c88 PhCI869PM_860_68.elf __fixsfsi
00015c8c PhCI869PM_860_68.elf __subsf3
00015c90 PhCI869PM_860_68.elf _finc
00015c94 PhCI869PM_860_68.elf _f_neg
00015c98 PhCI869PM_860_68.elf _f_sub
00015c9c PhCI869PM_860_68.elf _f_itof
00015ca0 PhCI869PM_860_68.elf _fabsf
00015ca4 PhCI869PM_860_68.elf _f_utof
00015ca8 PhCI869PM_860_68.elf _fpfabs
00015cac PhCI869PM_860_68.elf __floatsisf
00015cb0 PhCI869PM_860_68.elf _f_div
00015cb4 PhCI869PM_860_68.elf __negsf2
00015cb8 PhCI869PM_860_68.elf __mulsf3
00015cbc PhCI869PM_860_68.elf _f_ftoi
00015cc0 PhCI869PM_860_68.elf _f_mul
00015cc4 PhCI869PM_860_68.elf __fixunssfsi
00015cc8 PhCI869PM_860_68.elf _f_ftou
00015ccc PhCI869PM_860_68.elf __addsf3
00015cd0 PhCI869PM_860_68.elf _f_feq
00015cd4 PhCI869PM_860_68.elf _f_flt
00015cd8 PhCI869PM_860_68.elf _f_fle
00015cdc PhCI869PM_860_68.elf __nesf2
00015ce0 PhCI869PM_860_68.elf __gtsf2
00015ce4 PhCI869PM_860_68.elf _f_fge
00015ce8 PhCI869PM_860_68.elf _f_fgt
00015cec PhCI869PM_860_68.elf _f_fne
00015cf0 PhCI869PM_860_68.elf _f_cmp
00015cf4 PhCI869PM_860_68.elf _f_cmpe
00015cf8 PhCI869PM_860_68.elf ldexpf
00015cfc PhCI869PM_860_68.elf modff
00015d00 PhCI869PM_860_68.elf frexpf
00015d04 PhCI869PM_860_68.elf exadd
00015d08 PhCI869PM_860_68.elf exmul
00015d0c PhCI869PM_860_68.elf sigmax
00015d10 PhCI869PM_860_68.elf exdiv
00015d14 PhCI869PM_860_68.elf exsub
00015d18 PhCI869PM_860_68.elf __eqdf2
00015d1c PhCI869PM_860_68.elf __ltdf2
00015d20 PhCI869PM_860_68.elf __lesf2
00015d24 PhCI869PM_860_68.elf __ledf2
00015d28 PhCI869PM_860_68.elf __eqsf2
00015d2c PhCI869PM_860_68.elf __ltsf2
00015d30 PhCI869PM_860_68.elf __gesf2
00015d34 PhCI869PM_860_68.elf __gedf2
00015d40 PhCI869PM_860_68.elf fprintf
00015d44 PhCI869PM_860_68.elf __stdout
00015d48 PhCI869PM_860_68.elf __stderr
00015d4c PhCI869PM_860_68.elf setjmp
00015d50 PhCI869PM_860_68.elf longjmp
00015d54 PhCI869PM_860_68.elf operator new[](unsigned int)
00015d58 PhCI869PM_860_68.elf operator delete[](void*)
00015d5c PhCI869PM_860_68.elf __floatunsisf
00015d60 PhCI869PM_860_68.elf __floatunsidf
00015d64 PhCI869PM_860_68.elf CRTFuncTabEnd
00015d64 PhCI869PM_860_68.elf ecprocs
00015d64 PhCI869PM_860_68.elf etext
00015d64 PhCI869PM_860_68.elf sgot2
000162c8 PhCI869PM_860_68.elf egot2
000162c8 PhCI869PM_860_68.elf sfixup
000169a8 PhCI869PM_860_68.elf CMirroredObject::c_pMirroredObjectMgrImpl
000169a8 PhCI869PM_860_68.elf efixup
000169ac PhCI869PM_860_68.elf CMirroredObjectAgent::c_pHeapCallback
000169b0 PhCI869PM_860_68.elf CMirroredObjectAgent::c_AgentTag
000169b4 V CComCoClass<CPhAF100PM, &(CLSID_CPhAF100PM)>::m_HeapTag PhCI869PM_860_68.elf 
000169b8 PhCI869PM_860_68.elf PHproperties
000169c0 PhCI869PM_860_68.elf useEXEHEAD
</SYMBOLS>
