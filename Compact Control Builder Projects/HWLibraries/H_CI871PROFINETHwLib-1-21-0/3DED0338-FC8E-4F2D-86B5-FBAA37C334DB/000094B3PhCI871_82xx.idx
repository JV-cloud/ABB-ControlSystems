<HEAD>
Index of symbols created Tue 10/22/2013 10:19:15.12 
</HEAD>
<SECTIONS=10>
00010000 0001ef5c .text
0001ef5c 0001f844 .got2
0001f844 0001fb30 .fixup
0001fb30 0001fb40 .bss
0001fb40 00025418 .data
00025418 00025418 .sdata
00025418 0003c524 .stab
0003c524 0001ef5c .comment
0001ef5c 0003c764 .sdata2
0003c764 0003c764 .stabstr
</SECTIONS>
<SYMBOLS=503>
00000000 PhCI871_82xx.elf EXE_HEAD
00000064 PhCI871_82xx.elf CPhCI871::CPhCI871(void)
00000200 PhCI871_82xx.elf CPhCI871::~CPhCI871(void)
00000384 PhCI871_82xx.elf CPhCI871::GetProductInfo(unsigned char *, unsigned char *, unsigned char *, unsigned long)
000004c0 PhCI871_82xx.elf CPhCI871::SetCommonCallbackInterface(ICommonCallback *)
00000a34 PhCI871_82xx.elf CPhCI871::PrepareForTermination(teHWFErrorCode *)
00000bc0 PhCI871_82xx.elf CPhCI871::PerformSwitchover(trHWFAddress, teHWFErrorCode *)
00000c40 PhCI871_82xx.elf CPhCI871::PerformFailover(trHWFAddress, teHWFErrorCode *)
00000cc0 PhCI871_82xx.elf CPhCI871::StartUsingDevice(trHWFAddress, teHWFErrorCode *)
00000df0 PhCI871_82xx.elf CPhCI871::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode *)
00000f20 PhCI871_82xx.elf CPhCI871::RemoveIoConnection(unsigned long, teHWFErrorCode *)
00001038 PhCI871_82xx.elf CPhCI871::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode *)
000010fc PhCI871_82xx.elf CPhCI871::PhResponsibility(trHWFAddress, teHWFErrorCode *)
000011c0 PhCI871_82xx.elf CPhCI871::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode *)
00001274 PhCI871_82xx.elf CPhCI871::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode *)
00001368 PhCI871_82xx.elf CPhCI871::PhCommonResponsibility(trHWFAddress, teHWFErrorCode *, teResponsibilityType)
00001508 PhCI871_82xx.elf CPhCI871::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode *)
00001648 PhCI871_82xx.elf CPhCI871::KickWatchdog(unsigned short *, teHWFErrorCode *)
000018fc PhCI871_82xx.elf CPhCI871::GetStatus(trHWFAddress, teHWFUnitKind, unsigned long *, unsigned long *, teHWFErrorCode *)
000019e4 PhCI871_82xx.elf CPhCI871::PhDiagnosticsTableNew(teDiagErrorCode *)
00001ac4 PhCI871_82xx.elf CPhCI871::PhDiagnosticsTableCleared(teDiagErrorCode *)
00001ba4 PhCI871_82xx.elf CPhCI871::GetCopyRoutineReference(unsigned int, void (**)(short, void *, void *), IOAccessErrorCode *)
00001c70 PhCI871_82xx.elf CPhCI871::ObtainDPM(eAreaType, trHWFAddress, IOAccessErrorCode *)
00001fac PhCI871_82xx.elf CPhCI871::ReleaseDPM(eAreaType, trHWFAddress, IOAccessErrorCode *)
000022e8 PhCI871_82xx.elf CPhCI871::CreateAndOpenCI871Driver(void const *, int, char const *, trHWFAddress const &, unsigned long &)
000028c4 PhCI871_82xx.elf CPhCI871::HeapCallbackGetMemory(void const *, int, char const *, trHWFAddress const &, int, char *&)
00002a1c PhCI871_82xx.elf CPhCI871::HeapCallbackReturnMemory(void const *, int, char const *, trHWFAddress const &, char *)
00002b44 PhCI871_82xx.elf CPhCI871::StatusCallbackRegisterWatchdog(void const *, int, char const *, trHWFAddress const &)
00002d20 PhCI871_82xx.elf CPhCI871::StatusCallbackDeleteWatchdog(void const *, int, char const *, trHWFAddress const &)
00002e88 PhCI871_82xx.elf CPhCI871::StatusCallbackResetStatus(void const *, int, char const *, trHWFAddress const &, teHWFStatusType, teHWFExtStatusType)
00003160 PhCI871_82xx.elf CPhCI871::StatusCallbackSetStatus(void const *, int, char const *, trHWFAddress const &, teHWFStatusType, teHWFExtStatusType)
0000345c PhCI871_82xx.elf CPhCI871::EventMgrCallbackGGenerateSystemEvent(void const *, int, char const *, trHWFAddress const &, trHWFAddress, char const *, unsigned long, unsigned long, int, int, eTimeQualityClass, teGSeverityLevels)
000035e4 PhCI871_82xx.elf CPhCI871::EventMgrCallbackGGenerateExtEvent(void const *, int, char const *, trHWFAddress const &, char const *, trHWFAddress, char const *, unsigned long, unsigned long, int, int, eTimeQualityClass, bool, bool, int, int, bool)
000037bc PhCI871_82xx.elf CPhCI871::ConfigCallbackRegisterIoConfiguration(void const *, int, char const *, trHWFAddress const &, unsigned long)
00003928 PhCI871_82xx.elf CPhCI871::ConfigCallbackRegisterIoConnection(void const *, int, char const *, trHWFAddress const &, unsigned long, unsigned short *, unsigned short *, bool)
00003b14 PhCI871_82xx.elf CPhCI871::ConfigCallbackGetIoConnectionData(void const *, int, char const *, trHWFAddress const &, unsigned short &, unsigned char *&)
00003ce8 PhCI871_82xx.elf CPhCI871::ConfigCallbackGetHWState(void const *, int, char const *, trHWFAddress const &, trHWFAddress, teHWFHWState *)
00003e94 PhCI871_82xx.elf CPhCI871::ConfigCallbackGetIoConnectionState(void const *, int, char const *, trHWFAddress const &, trHWFAddress, teHWFHWState *)
00004040 PhCI871_82xx.elf CPhCI871::ConfigCallbackGetIoConfigurationData(void const *, int, char const *, trHWFAddress const &, unsigned short &, unsigned char *&)
000041d8 PhCI871_82xx.elf CPhCI871::ConfigCallbackRegisterDevice(void const *, int, char const *, trHWFAddress const &)
00004354 PhCI871_82xx.elf CPhCI871::ConfigCallbackGetHWConfigurationData(void const *, int, char const *, trHWFAddress const &, unsigned long &, unsigned long *&)
000044e0 PhCI871_82xx.elf CPhCI871::ConfigCallbackGetNrOfSubUnits(void const *, int, char const *, trHWFAddress const &, unsigned long &)
00004640 PhCI871_82xx.elf CPhCI871::ConfigCallbackGetFirstSubUnit(void const *, int, char const *, trHWFAddress const &, trHWFAddress &)
000047b8 PhCI871_82xx.elf CPhCI871::ConfigCallbackGetNextUnit(void const *, int, char const *, trHWFAddress const &, trHWFAddress &)
00004930 PhCI871_82xx.elf CPhCI871::VOSCallbackThreadDelete(void const *, int, char const *, trHWFAddress const &, unsigned long &)
00004a90 PhCI871_82xx.elf CPhCI871::VOSCallbackSleepMs(void const *, int, char const *, trHWFAddress const &, unsigned long)
00004b78 PhCI871_82xx.elf CPhCI871::VOSCallbackThreadSpawn(void const *, int, char const *, trHWFAddress const &, unsigned long &, char const *, CVosPriorityLevelEnum, unsigned long, unsigned long, int, int, int, int)
00004ce0 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackSetLed(void const *, int, char const *, trHWFAddress const &, long, bool)
00004e68 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackDeviceIoControl(void const *, int, char const *, trHWFAddress const &, unsigned short, rDeviceIoControlHeader *, unsigned long)
0000514c PhCI871_82xx.elf CPhCI871::CIGDriverCallbackDeleteTransactionId(void const *, int, char const *, trHWFAddress const &, unsigned long &)
00005298 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackDeleteDrvEvent(void const *, int, char const *, trHWFAddress const &, unsigned long &)
000053e4 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackWaitForDrvEvent(void const *, int, char const *, trHWFAddress const &, unsigned long, unsigned long, bool)
000055f8 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackAttachDrvEvent(void const *, int, char const *, trHWFAddress const &, unsigned long, unsigned long)
00005704 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackCreateTransactionId(void const *, int, char const *, trHWFAddress const &, unsigned long &)
00005830 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackCreateDrvEvent(void const *, int, char const *, trHWFAddress const &, unsigned long &)
00005964 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackReopen(void const *, int, char const *, trHWFAddress const &)
00005ab0 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackClose(void const *, int, char const *, trHWFAddress const &)
00005c40 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackRead(void const *, int, char const *, trHWFAddress const &, unsigned long, unsigned short, unsigned char *, unsigned long, unsigned long &)
00005fa8 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackWrite(void const *, int, char const *, trHWFAddress const &, unsigned long, unsigned short, unsigned char *, unsigned long, unsigned long &)
00006254 PhCI871_82xx.elf CPhCI871::CIGDriverCallbackGetAsyncResult(void const *, int, char const *, trHWFAddress const &, unsigned long, unsigned long &)
000063cc PhCI871_82xx.elf CPhCI871::CIGDriverDelete(void const *, int, char const *, trHWFAddress const &)
00006548 PhCI871_82xx.elf CPhCI871::checkCiFirmwareCompatibility(void const *, int, char const *, trHWFAddress const &, ICIGDriverCallback_v1 *)
00006864 PhCI871_82xx.elf CPhCI871::StoreMsg(eMsgType, int, char const *, trHWFAddress const &, char const *, unsigned long, unsigned long, unsigned long) const
00006b60 PhCI871_82xx.elf CPhCI871::setObtainPointers(void const *, int, char const *, trHWFAddress const &, unsigned short *, unsigned short *)
00006bcc PhCI871_82xx.elf CPhCI871::startBatchThread(trHWFAddress const &)
00006d88 PhCI871_82xx.elf CPhCI871::stopBatchThread(trHWFAddress const &)
00006f54 PhCI871_82xx.elf CPhCI871::batchThread(trHWFAddress *)
00007144 PhCI871_82xx.elf CPhCI871::deleteDriver(void const *, int, char const *, trHWFAddress const &, bool)
000072c0 PhCI871_82xx.elf CPhCI871::attendStatus(int, char const *, trHWFAddress const &, bool const &, unsigned long const &, unsigned long const &)
000074a8 PhCI871_82xx.elf CPhCI871::SetSubStates(trHWFAddress const &, bool, unsigned long, unsigned long)
0000768c PhCI871_82xx.elf CPhCI871::distributeAppReadyStatus(void const *, int, char const *, trHWFAddress const &)
00007744 PhCI871_82xx.elf CPhCI871::distributeWaitingToInitStatus(void const *, int, char const *, trHWFAddress const &, bool)
000077e0 PhCI871_82xx.elf CPhCI871::distributeStatus(trHWFAddress const &, bool, unsigned long, unsigned long, teDistributeType)
00007a6c PhCI871_82xx.elf CPhCI871::filterDistributeHWStatus(trHWFAddress const &, unsigned long &, unsigned long &)
00007b0c PhCI871_82xx.elf CPhCI871::filterStatelessHWStatus(trHWFAddress const &, unsigned long &, unsigned long &)
00007ba4 PhCI871_82xx.elf CPhCI871::AddNodeEventList(trHWFAddress, unsigned long, unsigned long)
00007d44 PhCI871_82xx.elf CPhCI871::CheckEventList(void)
00007f7c PhCI871_82xx.elf CPhCI871::PrintObtainReleaseTimes(void)
000080b0 PhCI871_82xx.elf CPhCI871::isDriverRunning(void)
000080dc PhCI871_82xx.elf CPhCI871::defineSystemVariables(int, char const *, trHWFAddress const &)
00008240 G _SDA2_BASE_ PhCI871_82xx.elf 
00008270 PhCI871_82xx.elf CPhCI871::GetSysVarStoreInfo(void) const
00008308 PhCI871_82xx.elf CPhCI871::StoreError(int, char const *, trHWFAddress const &, char const *, unsigned long, unsigned long, unsigned long) const
00008378 PhCI871_82xx.elf CPhCI871::StoreInfo(CPhCI871::eInfoLevel, int, char const *, trHWFAddress const &, char const *, unsigned long, unsigned long, unsigned long) const
0000843c PhCI871_82xx.elf CPhCI871::StoreWarning(int, char const *, trHWFAddress const &, char const *, unsigned long, unsigned long, unsigned long) const
000084b0 PhCI871_82xx.elf CPhCI871::operator new(unsigned int, IHeapCallback *)
00008564 PhCI871_82xx.elf CPhCI871::heap_delete(void)
000085d0 PhCI871_82xx.elf CPhCI871::QueryInterface(_GUID const &, void **)
000086f8 PhCI871_82xx.elf CPhCI871::AddRef(void)
00008710 PhCI871_82xx.elf CPhCI871::Release(void)
00008790 PhCI871_82xx.elf CPhCI871::batchThreadStub(void *, void *)
00008800 PhCI871_82xx.elf Letext
00008804 PhCI871_82xx.elf CPhCI871SubLayer::CPhCI871SubLayer(void)
000088c0 PhCI871_82xx.elf CPhCI871SubLayer::~CPhCI871SubLayer(void)
00008964 PhCI871_82xx.elf CPhCI871SubLayer::PutUpperLayerPointer(CPhCI871 *)
00008970 PhCI871_82xx.elf CPhCI871SubLayer::PrepareForTermination(teHWFErrorCode *)
00008ad4 PhCI871_82xx.elf CPhCI871SubLayer::StartUsingDevice(trHWFAddress, teHWFErrorCode *)
00008ba0 PhCI871_82xx.elf CPhCI871SubLayer::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode *)
00008d08 PhCI871_82xx.elf CPhCI871SubLayer::RemoveIoConnection(unsigned long, teHWFErrorCode *)
00008e54 PhCI871_82xx.elf CPhCI871SubLayer::PhResponsibility(trHWFAddress, teHWFErrorCode *, teResponsibilityType)
00009014 PhCI871_82xx.elf CPhCI871SubLayer::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode *)
000090e0 PhCI871_82xx.elf CPhCI871SubLayer::PhDiagnosticsTableNew(teDiagErrorCode *)
000091c0 PhCI871_82xx.elf CPhCI871SubLayer::PhDiagnosticsTableCleared(teDiagErrorCode *)
000092a0 PhCI871_82xx.elf CPhCI871SubLayer::GeoResetCEM(trHWFAddress const &, bool)
00009390 PhCI871_82xx.elf CPhCI871SubLayer::ConfigureAll(trHWFAddress const &, bool &, teResponsibilityType)
000098e0 PhCI871_82xx.elf CPhCI871SubLayer::ConfigureDevices(trHWFAddress const &, bool)
00009df0 PhCI871_82xx.elf CPhCI871SubLayer::ConfigureModules(trHWFAddress const &, bool, unsigned long &)
0000a188 PhCI871_82xx.elf CPhCI871SubLayer::RegisterConfiguration(trHWFAddress const &, unsigned long, bool, bool)
0000a508 PhCI871_82xx.elf CPhCI871SubLayer::CheckResponse(trHWFAddress const &, CPhCI871SubLayer::trCommand *)
0000a594 PhCI871_82xx.elf CPhCI871SubLayer::SendCommand(trHWFAddress const &, teControlType)
0000a70c PhCI871_82xx.elf CPhCI871SubLayer::SendConfig(trHWFAddress const &, unsigned char *)
0000a93c PhCI871_82xx.elf CPhCI871SubLayer::SendModuleRequest(trHWFAddress const &, trModuleMessage *)
0000aa40 PhCI871_82xx.elf CPhCI871SubLayer::SendMsg(trHWFAddress const &, unsigned char const *, unsigned int, unsigned char *, unsigned int)
0000ae14 PhCI871_82xx.elf CPhCI871SubLayer::SendAck(trHWFAddress const &, unsigned char const *, unsigned int)
0000afdc PhCI871_82xx.elf CPhCI871SubLayer::PerformDeleteDriver(void)
0000b214 PhCI871_82xx.elf CPhCI871SubLayer::StartStatusThread(trHWFAddress const &)
0000b38c PhCI871_82xx.elf CPhCI871SubLayer::StopStatusThread(trHWFAddress const &)
0000b57c PhCI871_82xx.elf CPhCI871SubLayer::StatusThread(trHWFAddress *)
0000bb34 PhCI871_82xx.elf CPhCI871SubLayer::performHWStatusSysAlarm(trHWFAddress const &)
0000bf3c PhCI871_82xx.elf CPhCI871SubLayer::CreateSystemEventForHwStatus(trHWFAddress const &, teInternalStatusBits, bool)
0000c1f4 PhCI871_82xx.elf CPhCI871SubLayer::performDiagnosisAlarm(trHWFAddress const &)
0000c5fc PhCI871_82xx.elf CPhCI871SubLayer::formatMessageString(trHWFAddress const &, char *, trDiagBody *, unsigned short, unsigned short)
0000cbdc PhCI871_82xx.elf CPhCI871SubLayer::GetDiagnosisStringForErrorType(trHWFAddress const &, char *, unsigned short, unsigned short)
0000cd44 PhCI871_82xx.elf CPhCI871SubLayer::ChannelPropertiesTreatment(trHWFAddress const &, unsigned short, unsigned short)
0000cf18 PhCI871_82xx.elf CPhCI871SubLayer::performProcessAlarm(trHWFAddress const &)
0000d4e8 PhCI871_82xx.elf CPhCI871SubLayer::CreateSystemEventForProcessAlarm(trHWFAddress const &, unsigned long, unsigned short, unsigned short, unsigned short)
0000d754 PhCI871_82xx.elf CPhCI871SubLayer::collectDiagProcAlarmMessage(trHWFAddress const &, teMessageType)
0000d9fc PhCI871_82xx.elf CPhCI871SubLayer::SendDiagProcAck(trHWFAddress const &, teMessageType, short)
0000dbbc PhCI871_82xx.elf CPhCI871SubLayer::StatusThreadStub(void *, void *)
0000dbe4 PhCI871_82xx.elf Letext
0000dbe8 PhCI871_82xx.elf ObjectFactory
0000dd2c PhCI871_82xx.elf Letext
0000dd30 PhCI871_82xx.elf StubEventMgrCallback::StubEventMgrCallback(void)
0000dd98 PhCI871_82xx.elf StubEventMgrCallback::~StubEventMgrCallback(void)
0000ddf0 PhCI871_82xx.elf StubEventMgrCallback::stubSetErrorCode(int *)
0000ddfc PhCI871_82xx.elf StubEventMgrCallback::stubSetHESULT(long)
0000de04 PhCI871_82xx.elf StubEventMgrCallback::GGenerateSystemEvent(char const *, char const *, unsigned long, unsigned long, int, int, eTimeQualityClass, int *, teGSeverityLevels) const
0000de0c PhCI871_82xx.elf StubEventMgrCallback::GGenerateExtEvent(char const *, unsigned long, unsigned long, int, int, eTimeQualityClass, bool, bool, int, int, bool, int *) const
0000de14 PhCI871_82xx.elf StubEventMgrCallback::GApplicSetVersionRequest(unsigned int *) const
0000de1c PhCI871_82xx.elf StubEventMgrCallback::GDefineSystemAlarm(char const *, char const *, _GUID, char const *, char *, int *, teGSeverityLevels) const
0000de24 PhCI871_82xx.elf StubEventMgrCallback::GDeleteSystemAlarm(char const *, char const *, int *) const
0000de2c PhCI871_82xx.elf StubEventMgrCallback::GChangeSystemAlarm(bool, char const *, unsigned long, unsigned long, int, int, eTimeQualityClass, char const *, int *) const
0000de38 PhCI871_82xx.elf ICallback::~ICallback(void)
0000de8c PhCI871_82xx.elf IEventMgrCallback::~IEventMgrCallback(void)
0000dedc PhCI871_82xx.elf StubEventMgrCallback1::GGenerateSystemEventUnitAsSource(trHWFAddress, char const *, unsigned long, unsigned long, int, int, eTimeQualityClass, int *, teGSeverityLevels) const
0000dedc PhCI871_82xx.elf Letext
0000dee4 PhCI871_82xx.elf StubEventMgrCallback1::GGenerateExtEventUnitAsAltSource(char const *, trHWFAddress, char const *, unsigned long, unsigned long, int, int, eTimeQualityClass, bool, bool, int, int, bool, int *) const
0000deec PhCI871_82xx.elf Letext
0000def0 PhCI871_82xx.elf __pure_virtual
0000df58 PhCI871_82xx.elf __builtin_delete
0000dfbc PhCI871_82xx.elf Letext
0000dfbc PhCI871_82xx.elf Letext
0000dfbc PhCI871_82xx.elf Letext
0000dfc0 PhCI871_82xx.elf CPhCommon_Base::CPhCommon_Base(void)
0000e02c PhCI871_82xx.elf CPhCommon_Base::~CPhCommon_Base(void)
0000e0a4 PhCI871_82xx.elf CPhCommon_Base::GetProductInfo(unsigned char *, unsigned char *, unsigned char *, unsigned long)
0000e0e0 PhCI871_82xx.elf CPhCommon_Base::SetCommonCallbackInterface(ICommonCallback *)
0000e110 PhCI871_82xx.elf CPhConfig_Base1::PrepareForTermination(teHWFErrorCode *)
0000e140 PhCI871_82xx.elf CPhConfig_Base1::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode *)
0000e174 PhCI871_82xx.elf CPhConfig_Base1::RemoveIoConnection(unsigned long, teHWFErrorCode *)
0000e1a8 PhCI871_82xx.elf CPhConfig_Base1::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode *)
0000e1dc PhCI871_82xx.elf CPhConfig_Base1::PhResponsibility(trHWFAddress, teHWFErrorCode *)
0000e210 PhCI871_82xx.elf CPhConfig_Base1::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode *)
0000e248 PhCI871_82xx.elf CPhConfig_Base1::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode *)
0000e27c PhCI871_82xx.elf CPhConfig_Base1::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode *)
0000e2b0 PhCI871_82xx.elf CPhConfig_Base1::PerformSwitchover(trHWFAddress, teHWFErrorCode *)
0000e2e4 PhCI871_82xx.elf CPhConfig_Base1::StartUsingDevice(trHWFAddress, teHWFErrorCode *)
0000e318 PhCI871_82xx.elf CPhConfig_Base1::PerformFailover(trHWFAddress, teHWFErrorCode *)
0000e34c PhCI871_82xx.elf CPhClient_Base::ConnectReq(unsigned long, unsigned long *, int *)
0000e384 PhCI871_82xx.elf CPhClient_Base::DisconnectReq(unsigned long, unsigned long, int *)
0000e3bc PhCI871_82xx.elf CPhClient_Base::ReadVarReq(unsigned long, int *)
0000e3f0 PhCI871_82xx.elf CPhClient_Base::WriteVarReq(unsigned long, int *)
0000e424 PhCI871_82xx.elf CPhClient_Base::ReadRawReq(unsigned long, int *)
0000e458 PhCI871_82xx.elf CPhClient_Base::WriteRawReq(unsigned long, int *)
0000e48c PhCI871_82xx.elf CPhClient_Base::AbortRawReq(unsigned long, int *)
0000e4c0 PhCI871_82xx.elf CPhClient_Base::AbortVarReq(unsigned long, int *)
0000e4f4 PhCI871_82xx.elf CPhClient_Base::GetExtendedStatusSize(unsigned long, int *, int *)
0000e52c PhCI871_82xx.elf CPhClient_Base::GetExtendedStatus(unsigned long, int, teIEC1131Type *, tGCValue *, int *)
0000e56c PhCI871_82xx.elf CPhClient_Base::SetStatus(unsigned long, int, int *)
0000e5a4 PhCI871_82xx.elf CPhClient_Base::ReadRes(unsigned long, int, int *)
0000e5dc PhCI871_82xx.elf CPhClient_Base::WriteRes(unsigned long, int, int *)
0000e614 PhCI871_82xx.elf CPhClient_Base1::ConnectReq(unsigned long, unsigned long *, int *)
0000e64c PhCI871_82xx.elf CPhClient_Base1::DisconnectReq(unsigned long, unsigned long, int *)
0000e684 PhCI871_82xx.elf CPhClient_Base1::ReadVarReq(unsigned long, int *)
0000e6b8 PhCI871_82xx.elf CPhClient_Base1::WriteVarReq(unsigned long, int *)
0000e6ec PhCI871_82xx.elf CPhClient_Base1::RegisterVarReq(unsigned long, int *)
0000e720 PhCI871_82xx.elf CPhClient_Base1::ReadRawReq(unsigned long, int *)
0000e754 PhCI871_82xx.elf CPhClient_Base1::WriteRawReq(unsigned long, int *)
0000e788 PhCI871_82xx.elf CPhClient_Base1::AbortRawReq(unsigned long, int *)
0000e7bc PhCI871_82xx.elf CPhClient_Base1::AbortVarReq(unsigned long, int *)
0000e7f0 PhCI871_82xx.elf CPhClient_Base1::TimeoutAbortVarReq(unsigned long, int *)
0000e880 PhCI871_82xx.elf CPhClient_Base1::GetExtendedStatusSize(unsigned long, int *, int *)
0000e8b8 PhCI871_82xx.elf CPhClient_Base1::GetExtendedStatus(unsigned long, int, teIEC1131Type *, tGCValue *, int *)
0000e8f8 PhCI871_82xx.elf CPhClient_Base1::BufferTakeForReceive(unsigned long, int *)
0000e92c PhCI871_82xx.elf CPhClient_Base1::BufferGiveForReceive(unsigned long, int, int *)
0000e964 PhCI871_82xx.elf CPhClient_Base1::BufferTakeForSend(unsigned long, unsigned int, int *)
0000e99c PhCI871_82xx.elf CPhClient_Base1::BufferGiveForSend(unsigned long, unsigned int, int, int *)
0000e9d8 PhCI871_82xx.elf CPhClient_Base1::SetStatus(unsigned long, int, int *)
0000ea10 PhCI871_82xx.elf CPhClient_Base1::ReadRes(unsigned long, int, int *)
0000ea48 PhCI871_82xx.elf CPhClient_Base1::WriteRes(unsigned long, int, int *)
0000ea80 PhCI871_82xx.elf CPhStatus_Base1::KickWatchdog(unsigned short *, teHWFErrorCode *)
0000eab4 PhCI871_82xx.elf CPhStatus_Base1::GetStatus(trHWFAddress, teHWFUnitKind, unsigned long *, unsigned long *, teHWFErrorCode *)
0000eaf4 PhCI871_82xx.elf CPhIOAccess_Base::GetCopyRoutineReference(unsigned int, void (**)(short, void *, void *), IOAccessErrorCode *)
0000eb2c PhCI871_82xx.elf CPhIOAccess_Base::ObtainDPM(eAreaType, trHWFAddress, IOAccessErrorCode *)
0000eb64 PhCI871_82xx.elf CPhIOAccess_Base::ReleaseDPM(eAreaType, trHWFAddress, IOAccessErrorCode *)
0000eb9c PhCI871_82xx.elf CPhDiagnostics_Base::PhDiagnosticsTableNew(teDiagErrorCode *)
0000ebcc PhCI871_82xx.elf CPhDiagnostics_Base::PhDiagnosticsTableCleared(teDiagErrorCode *)
0000ebfc PhCI871_82xx.elf CPhOLU_Base::PrepareForFirmwareDownload(trHWFAddress const *, unsigned long, eOLUStatus *)
0000ec34 PhCI871_82xx.elf CPhOLU_Base::PrepareForApplicationStop(trHWFAddress const *, eOLUStatus *)
0000ec68 PhCI871_82xx.elf CPhOLU_Base::ResumeOperation(trHWFAddress const *, eOLUStatus *)
0000ec9c PhCI871_82xx.elf CPhOLU_Base::PhResponsibilityForOLU(trHWFAddress const *, eOLUStatus *)
0000ecd0 PhCI871_82xx.elf CPhOLU_Base::PrepareForLeavingOLU(trHWFAddress const *, eOLUStatus *)
0000ed04 PhCI871_82xx.elf CPhOLU_Base::PrepareForAppAndConfigDownload(trHWFAddress const *, eOLUStatus *)
0000ed3c PhCI871_82xx.elf IPhCommon::IPhCommon(void)
0000eda8 PhCI871_82xx.elf IUnknown::IUnknown(void)
0000ee00 PhCI871_82xx.elf CRTFuncTabBegin
0000ee00 PhCI871_82xx.elf Letext
0000ee00 PhCI871_82xx.elf scprocs
0000ee0c PhCI871_82xx.elf printf
0000ee10 PhCI871_82xx.elf sprintf
0000ee14 PhCI871_82xx.elf sscanf
0000ee18 PhCI871_82xx.elf memcpy
0000ee1c PhCI871_82xx.elf memset
0000ee20 PhCI871_82xx.elf strcat
0000ee24 PhCI871_82xx.elf strcmp
0000ee28 PhCI871_82xx.elf strlen
0000ee2c PhCI871_82xx.elf strncmp
0000ee30 PhCI871_82xx.elf strncpy
0000ee34 PhCI871_82xx.elf memchr
0000ee38 PhCI871_82xx.elf memcmp
0000ee3c PhCI871_82xx.elf memmove
0000ee40 PhCI871_82xx.elf strchr
0000ee44 PhCI871_82xx.elf strcoll
0000ee48 PhCI871_82xx.elf strcpy
0000ee4c PhCI871_82xx.elf strcspn
0000ee50 PhCI871_82xx.elf strncat
0000ee54 PhCI871_82xx.elf strpbrk
0000ee58 PhCI871_82xx.elf strrchr
0000ee5c PhCI871_82xx.elf strspn
0000ee60 PhCI871_82xx.elf strstr
0000ee64 PhCI871_82xx.elf strtok
0000ee68 PhCI871_82xx.elf strxfrm
0000ee6c PhCI871_82xx.elf strerror
0000ee70 PhCI871_82xx.elf pow
0000ee74 PhCI871_82xx.elf acos
0000ee78 PhCI871_82xx.elf asin
0000ee7c PhCI871_82xx.elf atan
0000ee80 PhCI871_82xx.elf atan2
0000ee84 PhCI871_82xx.elf ceil
0000ee88 PhCI871_82xx.elf cos
0000ee8c PhCI871_82xx.elf cosh
0000ee90 PhCI871_82xx.elf exp
0000ee94 PhCI871_82xx.elf fabs
0000ee98 PhCI871_82xx.elf floor
0000ee9c PhCI871_82xx.elf fmod
0000eea0 PhCI871_82xx.elf frexp
0000eea4 PhCI871_82xx.elf ldexp
0000eea8 PhCI871_82xx.elf log
0000eeac PhCI871_82xx.elf log10
0000eeb0 PhCI871_82xx.elf modf
0000eeb4 PhCI871_82xx.elf sin
0000eeb8 PhCI871_82xx.elf sinh
0000eebc PhCI871_82xx.elf sqrt
0000eec0 PhCI871_82xx.elf tan
0000eec4 PhCI871_82xx.elf tanh
0000eec8 PhCI871_82xx.elf div_r
0000eecc PhCI871_82xx.elf labs
0000eed0 PhCI871_82xx.elf strtol
0000eed4 PhCI871_82xx.elf free
0000eed8 PhCI871_82xx.elf abort
0000eedc PhCI871_82xx.elf abs
0000eee0 PhCI871_82xx.elf atof
0000eee4 PhCI871_82xx.elf atoi
0000eee8 PhCI871_82xx.elf atol
0000eeec PhCI871_82xx.elf bsearch
0000eef0 PhCI871_82xx.elf ldiv_r
0000eef4 PhCI871_82xx.elf qsort
0000eef8 PhCI871_82xx.elf rand
0000eefc PhCI871_82xx.elf srand
0000ef00 PhCI871_82xx.elf strtod
0000ef04 PhCI871_82xx.elf strtoul
0000ef08 PhCI871_82xx.elf malloc
0000ef0c PhCI871_82xx.elf __assert
0000ef10 PhCI871_82xx.elf time
0000ef14 PhCI871_82xx.elf asctime
0000ef18 PhCI871_82xx.elf gmtime
0000ef1c PhCI871_82xx.elf clock
0000ef20 PhCI871_82xx.elf ctime
0000ef24 PhCI871_82xx.elf difftime
0000ef28 PhCI871_82xx.elf localtime
0000ef2c PhCI871_82xx.elf mktime
0000ef30 PhCI871_82xx.elf strftime
0000ef34 PhCI871_82xx.elf eventcollSem
0000ef38 PhCI871_82xx.elf intLock
0000ef3c PhCI871_82xx.elf intUnlock
0000ef40 PhCI871_82xx.elf __builtin_vec_new
0000ef44 PhCI871_82xx.elf __builtin_vec_delete
0000ef48 PhCI871_82xx.elf fprintf
0000ef4c PhCI871_82xx.elf __stdout
0000ef50 PhCI871_82xx.elf __stderr
0000ef54 PhCI871_82xx.elf setjmp
0000ef58 PhCI871_82xx.elf longjmp
0000ef5c PhCI871_82xx.elf CRTFuncTabEnd
0000ef5c PhCI871_82xx.elf ecprocs
0000ef5c PhCI871_82xx.elf etext
0000ef5c PhCI871_82xx.elf sgot2
0000f844 PhCI871_82xx.elf egot2
0000f844 PhCI871_82xx.elf sfixup
0000fb30 PhCI871_82xx.elf efixup
0000fb30 PhCI871_82xx.elf useEXEHEAD
0000fbac PhCI871_82xx.elf CComCoClass<CPhCI871, &CLSID_CPhCI871>::m_HeapTag
00011018 PhCI871_82xx.elf CPhCI871::CPhIOAccess_Base virtual table
00011058 PhCI871_82xx.elf CPhCI871::CPhStatus_Base1 virtual table
00011090 PhCI871_82xx.elf CPhCI871::CPhConfig_Base1 virtual table
00011110 PhCI871_82xx.elf CPhCI871 virtual table
00011150 PhCI871_82xx.elf IPhIOAccess virtual table
00011190 PhCI871_82xx.elf IPhStatus1 virtual table
000111c8 PhCI871_82xx.elf IPhConfig1 virtual table
00011248 PhCI871_82xx.elf IUnknown virtual table
00011270 PhCI871_82xx.elf CompanyName
00011274 PhCI871_82xx.elf ProductName
0001127c PhCI871_82xx.elf ProductVersion
00011294 PhCI871_82xx.elf ExpectedCiFirmwareName
00012308 PhCI871_82xx.elf CPhCI871SubLayer virtual table
00012320 PhCI871_82xx.elf CiToHwStatusCI871Coming
000125a0 PhCI871_82xx.elf CiToHwStatusCI871Going
00012820 PhCI871_82xx.elf CiToHwStatusDeviceComing
00012aa0 PhCI871_82xx.elf CiToHwStatusDeviceGoing
00012d20 PhCI871_82xx.elf CiToHwStatusModuleComing
00012fa0 PhCI871_82xx.elf CiToHwStatusModuleGoing
00013220 PhCI871_82xx.elf CiToHwStatusSubmoduleComing
000134a0 PhCI871_82xx.elf CiToHwStatusSubmoduleGoing
00013720 PhCI871_82xx.elf EventMessages
00013f20 PhCI871_82xx.elf CompleteChanErrMap
00014a0c PhCI871_82xx.elf CLSID_CPhCI871
00014a28 PhCI871_82xx.elf PHproperties
00014a30 PhCI871_82xx.elf CMirroredObject::c_pMirroredObjectMgrImpl
00014a34 PhCI871_82xx.elf CMirroredObjectAgent::c_pHeapCallback
00014a38 PhCI871_82xx.elf CMirroredObjectAgent::c_AgentTag
00014a40 PhCI871_82xx.elf StubEventMgrCallback virtual table
00014a88 PhCI871_82xx.elf IEventMgrCallback virtual table
00014ad0 PhCI871_82xx.elf ICallback virtual table
00014b38 PhCI871_82xx.elf GUID_NULL
00014b48 PhCI871_82xx.elf IID_IPhCommonCB
00014b58 PhCI871_82xx.elf IID_IPhConfigCB
00014b68 PhCI871_82xx.elf IID_IPhConfigCB1
00014b78 PhCI871_82xx.elf IID_IPhIOAccessCB
00014b88 PhCI871_82xx.elf IID_IPhExternalConfigCB1
00014b98 PhCI871_82xx.elf IID_IPhExternalConfigCB2
00014ba8 PhCI871_82xx.elf IID_IPhExternalConfigCB3
00014bb8 PhCI871_82xx.elf IID_IPhOLUCB
00014bc8 PhCI871_82xx.elf IID_IPhCommon
00014bd8 PhCI871_82xx.elf IID_IPhConfig1
00014be8 PhCI871_82xx.elf IID_IPhStatus1
00014bf8 PhCI871_82xx.elf IID_IPhClient
00014c08 PhCI871_82xx.elf IID_IPhClient1
00014c18 PhCI871_82xx.elf IID_IPhDiagnostics
00014c28 PhCI871_82xx.elf IID_IPhIOAccess
00014c38 PhCI871_82xx.elf IID_IPhSafeConfig
00014c48 PhCI871_82xx.elf IID_IPhSafeConfig1
00014c58 PhCI871_82xx.elf IID_IPhSimulation
00014c68 PhCI871_82xx.elf IID_IPhOLU
00014c78 PhCI871_82xx.elf IID_IHeapCallback
00014c88 PhCI871_82xx.elf IID_ISystemUtilitiesCallback
00014c98 PhCI871_82xx.elf IID_ISystemUtilitiesCallback1
00014ca8 PhCI871_82xx.elf IID_ISystemUtilitiesCallback2
00014cb8 PhCI871_82xx.elf IID_ISystemUtilitiesCallback3
00014cc8 PhCI871_82xx.elf IID_IEventMgrCallback
00014cd8 PhCI871_82xx.elf IID_IEventMgrCallback1
00014ce8 PhCI871_82xx.elf IID_ISysClockCallback
00014cf8 PhCI871_82xx.elf IID_ISysClockCallback1
00014d08 PhCI871_82xx.elf IID_ISysClockCallback2
00014d18 PhCI871_82xx.elf IID_ISysClockCallback3
00014d28 PhCI871_82xx.elf IID_IVOSCallback
00014d38 PhCI871_82xx.elf IID_INetwClockSynchCallback
00014d48 PhCI871_82xx.elf IID_IConfigCBCallback1
00014d58 PhCI871_82xx.elf IID_IConfigCBCallback2
00014d68 PhCI871_82xx.elf IID_IConfigCBCallback3
00014d78 PhCI871_82xx.elf IID_IExternalConfigCBCallback
00014d88 PhCI871_82xx.elf IID_IExternalConfigCBCallback2
00014d98 PhCI871_82xx.elf IID_IExternalConfigCBCallback3
00014da8 PhCI871_82xx.elf IID_IExternalConfigCBCallback4
00014db8 PhCI871_82xx.elf IID_IMessagesCBCallback
00014dc8 PhCI871_82xx.elf IID_IAIPAccessCBCallback
00014dd8 PhCI871_82xx.elf IID_IOLUCBCallback
00014de8 PhCI871_82xx.elf IID_ISystemUtilitiesCBCallback1
00014df8 PhCI871_82xx.elf IID_IConfigCallback1
00014e08 PhCI871_82xx.elf IID_IConfigCallback2
00014e18 PhCI871_82xx.elf IID_IStatusCallback1
00014e28 PhCI871_82xx.elf IID_IGenClientCallback
00014e38 PhCI871_82xx.elf IID_IGenClientCallback1
00014e48 PhCI871_82xx.elf IID_IDriverFactoryCallback
00014e58 PhCI871_82xx.elf IID_IDiagnosticsCallback
00014e68 PhCI871_82xx.elf IID_ISafeConfigCallback
00014e78 PhCI871_82xx.elf IID_ISafeConfigCallback1
00014e88 PhCI871_82xx.elf IID_ICRCCallback
00014e98 PhCI871_82xx.elf IID_IIOAccessCallback
00014ea8 PhCI871_82xx.elf IID_CriticalRegionCallback
00014eb8 PhCI871_82xx.elf IID_VOSExceptionCallback
00014ec8 PhCI871_82xx.elf IID_DrvCommonCallback
00014ed8 PhCI871_82xx.elf IID_ProtectedMirroredHeapCallback
00014ee8 PhCI871_82xx.elf IID_SharedMirroredHeapCallback
00014ef8 PhCI871_82xx.elf IID_TemporaryMirroredHeapCallback
00014f08 PhCI871_82xx.elf IID_IRestrictedVOSCallback
00014f18 PhCI871_82xx.elf IID_IVarServerCallback
00014f28 PhCI871_82xx.elf IID_IVarServerCallback1
00014f38 PhCI871_82xx.elf IID_ISOCKETCallback
00014f48 PhCI871_82xx.elf CPhOLU_Base virtual table
00014fa0 PhCI871_82xx.elf CPhDiagnostics_Base virtual table
00014fd8 PhCI871_82xx.elf CPhIOAccess_Base virtual table
00015018 PhCI871_82xx.elf CPhStatus_Base1 virtual table
00015050 PhCI871_82xx.elf CPhClient_Base1 virtual table
00015110 PhCI871_82xx.elf CPhClient_Base virtual table
000151a0 PhCI871_82xx.elf CPhConfig_Base1 virtual table
00015220 PhCI871_82xx.elf CPhCommon_Base virtual table
00015260 PhCI871_82xx.elf GUID_NULL
00015270 PhCI871_82xx.elf MaxCompanyNameLen
00015274 PhCI871_82xx.elf MaxProductNameLen
00015278 PhCI871_82xx.elf MaxProductVersionLen
0001527c PhCI871_82xx.elf cMaxNrOfHWFAdrLevels
00015280 PhCI871_82xx.elf cGCWrite
00015284 PhCI871_82xx.elf cGCRead
00015288 PhCI871_82xx.elf cGCSubscription
0001528c PhCI871_82xx.elf cGCRegistration
00015290 PhCI871_82xx.elf cGCAddMemoryAreaArrayNumberPlaces
00015294 PhCI871_82xx.elf cPONotFound
00015298 PhCI871_82xx.elf cGCBusyDisconnecting
0001529c PhCI871_82xx.elf cGCRemovingPO
000152a0 PhCI871_82xx.elf cGCParametersMissing
000152a4 PhCI871_82xx.elf cGCAlreadyDefined
000152a8 PhCI871_82xx.elf cGCTypeNotSupported
000152ac PhCI871_82xx.elf cGCIndexOutOfRange
000152b0 PhCI871_82xx.elf cGCTypeNotDefined
000152b4 PhCI871_82xx.elf cGCStringMismatch
000152b8 PhCI871_82xx.elf cGCFacadeError
000152bc PhCI871_82xx.elf cGCInvalidHandle
000152c0 PhCI871_82xx.elf cGCAddedMemoryAreaError
000152c4 PhCI871_82xx.elf cGCBSErrorDetected
000152c8 PhCI871_82xx.elf cAborted
000152cc PhCI871_82xx.elf cSuccess
000152d0 PhCI871_82xx.elf cPending
000152d4 PhCI871_82xx.elf cGCDisconnected
000152d8 PhCI871_82xx.elf cGCExtendedStatus
000152dc PhCI871_82xx.elf cPHHeapFull
000152e0 PhCI871_82xx.elf cPHTypeMismatch
000152e4 PhCI871_82xx.elf cPHSizeMismatch
000152e8 PhCI871_82xx.elf cPHErrAccessData
000152ec PhCI871_82xx.elf cPHErrProtocolData
000152f0 PhCI871_82xx.elf cPHAccessVarNotFound
000152f4 PhCI871_82xx.elf cPHErrInvalidPar
000152f8 PhCI871_82xx.elf cPHDirAddrFormatNotSupported
000152fc PhCI871_82xx.elf cPHGenericFormatNotSupported
00015300 PhCI871_82xx.elf cPHNotImplemented
00015304 PhCI871_82xx.elf cPHVarDataUnsupportedDirection
00015308 PhCI871_82xx.elf cPHVarDataNotSupported
0001530c PhCI871_82xx.elf cPHRawDataNotSupported
00015310 PhCI871_82xx.elf cPHDriverError
00015314 PhCI871_82xx.elf cPHHardwareError
00015318 PhCI871_82xx.elf cPHTRAdisconnect
0001531c PhCI871_82xx.elf cLegacyFormat
00015320 PhCI871_82xx.elf cDirAddrFormat
00015324 PhCI871_82xx.elf cGenericFormat
00015328 PhCI871_82xx.elf eHWFDeviceSpecific1
0001532c PhCI871_82xx.elf eHWFUnitBPrimary
00015330 PhCI871_82xx.elf cHWFOPCMask
00015334 PhCI871_82xx.elf cHWFOPCChannelOk
00015338 PhCI871_82xx.elf cHWFOPCChannelError
0001533c PhCI871_82xx.elf cHWFOPCChannelForced
00015340 PhCI871_82xx.elf cHWFOPCDeviceError
00015344 PhCI871_82xx.elf cHWFOPCChannelErrorLow
00015348 PhCI871_82xx.elf cHWFOPCChannelErrorHigh
0001534c PhCI871_82xx.elf cHWFOPCChannelHigh
00015350 PhCI871_82xx.elf cHWFOPCChannelLow
00015354 PhCI871_82xx.elf cHWFChannelRedundant
00015358 PhCI871_82xx.elf cHWFUnitBPrimary
0001535c PhCI871_82xx.elf cHWFBackupUnitError
00015360 PhCI871_82xx.elf cHWFXSPValueUsed
00015364 PhCI871_82xx.elf cHWFChannelSimulated
00015368 PhCI871_82xx.elf cHWFChannelForced
0001536c PhCI871_82xx.elf cHWFChannelInverted
00015370 PhCI871_82xx.elf cHWFXSPMask
00015374 PhCI871_82xx.elf cHWFXSPNoSetting
00015378 PhCI871_82xx.elf cHWFXSPValue
0001537c PhCI871_82xx.elf cHWFXSPClear
00015380 PhCI871_82xx.elf cHWFXSPFreeze
00015384 PhCI871_82xx.elf cHWFXSPInvert
00015388 PhCI871_82xx.elf cHWFXSPInitDPM
0001538c PhCI871_82xx.elf HWFNO_XSP_FORCE
0001538d PhCI871_82xx.elf HWFFORCE_OSP
0001538e PhCI871_82xx.elf HWFFORCE_CLEAR
0001538f PhCI871_82xx.elf HWFFORCE_BLOCK_IO_DPM_OUT_WRITE
00015390 PhCI871_82xx.elf HWFFORCE_BLOCK_SM_DPM_OUT_WRITE
00015394 PhCI871_82xx.elf cHWFMaxNrOfChannels
00015398 PhCI871_82xx.elf cHWFStatusErrorsMask
0001539c PhCI871_82xx.elf cHWFRootStatusErrorMask
000153a0 PhCI871_82xx.elf cHWFDoNotCopyUnitErrorMask
000153a4 PhCI871_82xx.elf cFWUpgradePrimary
000153a8 PhCI871_82xx.elf cFWUpgradeBackup
000153ac PhCI871_82xx.elf cNewPhVersion
000153b0 PhCI871_82xx.elf cNewPMFirmware
000153b8 PhCI871_82xx.elf IPhCommon virtual table
000153f0 PhCI871_82xx.elf IUnknown virtual table
0001d418 G _SDA_BASE_ PhCI871_82xx.elf 
</SYMBOLS>
