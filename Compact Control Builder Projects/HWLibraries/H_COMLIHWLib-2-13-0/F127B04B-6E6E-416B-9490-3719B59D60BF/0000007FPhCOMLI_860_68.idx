<HEAD>
Index of symbols created Mon 01/21/2019 11:23:07.93 
</HEAD>
<SECTIONS=15>
00010000 0001d178 .text
0001d178 0001d4bc .got2
0001d4bc 0001db1c .fixup
0001db1c 0001db40 .bss
0001db40 0001db4c .data
0001db4c 0001fce4 .debug_abbrev
0001fce4 000356af .debug_info
000356af 00039150 .debug_line
00039150 0003b198 .debug_frame
0003b198 000418cd .debug_loc
000418cd 00043eb0 .debug_pubnames
00043eb0 000441e0 .debug_aranges
000441e0 00044768 .debug_ranges
00044768 00049d58 .debug_str
00049d58 00049d58 .comment
</SECTIONS>
<SYMBOLS=585>
00000000 PhCOMLI_860_68.elf EXE_HEAD
00000060 PhCOMLI_860_68.elf CPhCOMLI::createSemaphore()
00000168 PhCOMLI_860_68.elf CPhCOMLI::ComliGetTraceLevel()
00000214 PhCOMLI_860_68.elf CPhCOMLI::ComliLogMethodCall(int, char const*)
000002b0 PhCOMLI_860_68.elf CPhCOMLI::PrepareMessage(char*, char const*, char const*, unsigned int)
000003f0 PhCOMLI_860_68.elf CPhCOMLI::WriteError(char const*, char const*, unsigned int)
000004c8 PhCOMLI_860_68.elf CPhCOMLI::deleteSemaphore()
00000684 PhCOMLI_860_68.elf CPhCOMLI::CheckPrerequisitesForClientReq(unsigned long)
00000774 PhCOMLI_860_68.elf CPhCOMLI::WriteInfo(char const*, char const*, unsigned int)
0000084c PhCOMLI_860_68.elf CPhCOMLI::StartThread(trHWFAddress)
00000950 PhCOMLI_860_68.elf vosThread(int, int, int, int)
00000974 PhCOMLI_860_68.elf CPhCOMLI::SetCommonCallbackInterface(ICommonCallback*)
00000c8c PhCOMLI_860_68.elf CPhCOMLI::GetProductInfo(unsigned char*, unsigned char*, unsigned char*, unsigned long)
00000d1c PhCOMLI_860_68.elf CPhCOMLI::CPhCOMLI()
00000e58 PhCOMLI_860_68.elf CPhCOMLI::CPhCOMLI()
00000f90 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::~CPhCOMLI()
00000f98 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::~CPhCOMLI()
00000fa0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::~CPhCOMLI()
00000fa8 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::~CPhCOMLI()
00000fb4 PhCOMLI_860_68.elf CPhCOMLI::~CPhCOMLI()
000010d4 PhCOMLI_860_68.elf CPhCOMLI::~CPhCOMLI()
000011f0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::~CPhCOMLI()
000011f8 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::~CPhCOMLI()
00001200 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::~CPhCOMLI()
00001208 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::~CPhCOMLI()
00001214 PhCOMLI_860_68.elf CPhCOMLI::~CPhCOMLI()
00001338 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::ReadRawReq(unsigned long, int*)
00001340 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::ReadRawReq(unsigned long, int*)
00001348 PhCOMLI_860_68.elf CPhCOMLI::ReadRawReq(unsigned long, int*)
00001358 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::WriteRawReq(unsigned long, int*)
00001360 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::WriteRawReq(unsigned long, int*)
00001368 PhCOMLI_860_68.elf CPhCOMLI::WriteRawReq(unsigned long, int*)
00001378 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::AbortRawReq(unsigned long, int*)
00001380 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::AbortRawReq(unsigned long, int*)
00001388 PhCOMLI_860_68.elf CPhCOMLI::AbortRawReq(unsigned long, int*)
00001398 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::GetExtendedStatusSize(unsigned long, int*, int*)
000013a0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::GetExtendedStatusSize(unsigned long, int*, int*)
000013a8 PhCOMLI_860_68.elf CPhCOMLI::GetExtendedStatusSize(unsigned long, int*, int*)
000013b8 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
000013c0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
000013c8 PhCOMLI_860_68.elf CPhCOMLI::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
000013d8 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::SetStatus(unsigned long, int, int*)
000013e0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::SetStatus(unsigned long, int, int*)
000013e8 PhCOMLI_860_68.elf CPhCOMLI::SetStatus(unsigned long, int, int*)
000013f8 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::ReadRes(unsigned long, int, int*)
00001400 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::ReadRes(unsigned long, int, int*)
00001408 PhCOMLI_860_68.elf CPhCOMLI::ReadRes(unsigned long, int, int*)
00001418 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::WriteRes(unsigned long, int, int*)
00001420 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::WriteRes(unsigned long, int, int*)
00001428 PhCOMLI_860_68.elf CPhCOMLI::WriteRes(unsigned long, int, int*)
00001438 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::TimeoutAbortVarReq(unsigned long, int*)
00001444 PhCOMLI_860_68.elf CPhCOMLI::TimeoutAbortVarReq(unsigned long, int*)
000014c4 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::AbortVarReq(unsigned long, int*)
000014cc PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::AbortVarReq(unsigned long, int*)
000014d8 PhCOMLI_860_68.elf CPhCOMLI::AbortVarReq(unsigned long, int*)
000017ec PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::WriteVarReq(unsigned long, int*)
000017f4 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::WriteVarReq(unsigned long, int*)
00001800 PhCOMLI_860_68.elf CPhCOMLI::WriteVarReq(unsigned long, int*)
00001b38 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::ReadVarReq(unsigned long, int*)
00001b40 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::ReadVarReq(unsigned long, int*)
00001b4c PhCOMLI_860_68.elf CPhCOMLI::ReadVarReq(unsigned long, int*)
00001e10 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::DisconnectReq(unsigned long, unsigned long, int*)
00001e18 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::DisconnectReq(unsigned long, unsigned long, int*)
00001e24 PhCOMLI_860_68.elf CPhCOMLI::DisconnectReq(unsigned long, unsigned long, int*)
00002230 PhCOMLI_860_68.elf CPhCOMLI::CheckPartnerString(char const*)
000022d0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::ConnectReq(unsigned long, unsigned long*, int*)
000022d8 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::ConnectReq(unsigned long, unsigned long*, int*)
000022e4 PhCOMLI_860_68.elf CPhCOMLI::ConnectReq(unsigned long, unsigned long*, int*)
000024dc PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode*)
000024e8 PhCOMLI_860_68.elf CPhCOMLI::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode*)
00002528 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode*)
00002534 PhCOMLI_860_68.elf CPhCOMLI::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode*)
00002574 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::RemoveIoConnection(unsigned long, teHWFErrorCode*)
00002580 PhCOMLI_860_68.elf CPhCOMLI::RemoveIoConnection(unsigned long, teHWFErrorCode*)
000025c0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::StartUsingDevice(trHWFAddress, teHWFErrorCode*)
000025cc PhCOMLI_860_68.elf CPhCOMLI::StartUsingDevice(trHWFAddress, teHWFErrorCode*)
0000260c PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::PerformFailover(trHWFAddress, teHWFErrorCode*)
00002618 PhCOMLI_860_68.elf CPhCOMLI::PerformFailover(trHWFAddress, teHWFErrorCode*)
00002658 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::PerformSwitchover(trHWFAddress, teHWFErrorCode*)
00002664 PhCOMLI_860_68.elf CPhCOMLI::PerformSwitchover(trHWFAddress, teHWFErrorCode*)
000026a4 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode*)
000026b0 PhCOMLI_860_68.elf CPhCOMLI::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode*)
00002750 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode*)
0000275c PhCOMLI_860_68.elf CPhCOMLI::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode*)
00002b8c PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode*)
00002b98 PhCOMLI_860_68.elf CPhCOMLI::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode*)
00002cd8 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::PrepareForTermination(teHWFErrorCode*)
00002ce4 PhCOMLI_860_68.elf CPhCOMLI::PrepareForTermination(teHWFErrorCode*)
00002e6c PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::PhResponsibility(trHWFAddress, teHWFErrorCode*)
00002e78 PhCOMLI_860_68.elf CPhCOMLI::PhResponsibility(trHWFAddress, teHWFErrorCode*)
000033dc PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::GetStatus(trHWFAddress, teHWFUnitKind, unsigned long*, unsigned long*, teHWFErrorCode*)
000033e4 PhCOMLI_860_68.elf CPhCOMLI::GetStatus(trHWFAddress, teHWFUnitKind, unsigned long*, unsigned long*, teHWFErrorCode*)
000033f8 PhCOMLI_860_68.elf CPhCOMLI::Free_Node(node*)
00003588 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::KickWatchdog(unsigned short*, teHWFErrorCode*)
00003594 PhCOMLI_860_68.elf CPhCOMLI::KickWatchdog(unsigned short*, teHWFErrorCode*)
000036c4 PhCOMLI_860_68.elf CPhCOMLI::Insert_Node(unsigned long, node*, int*)
000038c0 PhCOMLI_860_68.elf CPhCOMLI::CheckStateMachine()
000038dc PhCOMLI_860_68.elf CPhCOMLI::ResetToInitState()
00003908 PhCOMLI_860_68.elf CPhCOMLI::ValidateMsgType(unsigned char)
000039b0 PhCOMLI_860_68.elf CPhCOMLI::UpdateStamp(int)
000039f4 PhCOMLI_860_68.elf CPhCOMLI::ComliFlipDataBytes(unsigned char*, unsigned char*)
00003a6c PhCOMLI_860_68.elf CPhCOMLI::BCC(unsigned char*, unsigned int, unsigned int, bool*)
00003b6c PhCOMLI_860_68.elf CPhCOMLI::Handle_OtherSlaves_Packet(unsigned char*, unsigned int&, unsigned int)
00003ca8 PhCOMLI_860_68.elf CPhCOMLI::PutDecNrInAsciiCodeBuffer(unsigned char*, int, int, int, int*)
00003da4 PhCOMLI_860_68.elf CPhCOMLI::EmptyVardataQueue()
00003f80 PhCOMLI_860_68.elf CPhCOMLI::ComliForwardDataTo1131FB(unsigned long, int*)
00004340 PhCOMLI_860_68.elf CPhCOMLI::ASCIIHexToInt(unsigned char*, unsigned int, unsigned int, unsigned int*, bool)
00004464 PhCOMLI_860_68.elf CPhCOMLI::SlaveBuildResponseMessage(int*)
000046a4 PhCOMLI_860_68.elf CPhCOMLI::WriteToSerial(unsigned char*, unsigned int*)
000047a0 PhCOMLI_860_68.elf CPhCOMLI::ComliSendTelegram(int*)
000048c8 PhCOMLI_860_68.elf CPhCOMLI::ProcessMessageAndSend(int*)
000051d0 PhCOMLI_860_68.elf CPhCOMLI::ComliBuildTelegram(unsigned long, int*)
00005af0 PhCOMLI_860_68.elf CPhCOMLI::Process_SlaveIdMatches(unsigned char*, unsigned int&, unsigned int, int*)
00005ddc PhCOMLI_860_68.elf CPhCOMLI::ComliSlaveReceiveTelegram(int*)
00006490 PhCOMLI_860_68.elf CPhCOMLI::ComliMasterReceiveTelegram(unsigned long, int*)
00006b98 PhCOMLI_860_68.elf CPhCOMLI::ProcessVarData(unsigned long)
00006e04 PhCOMLI_860_68.elf CPhCOMLI::ThreadWork()
00007444 PhCOMLI_860_68.elf ObjectFactory
00007568 PhCOMLI_860_68.elf CComliSerialDriver::Init(ISerialDrvCallback*, ISystemUtilitiesCallback4*, bool)
00007580 PhCOMLI_860_68.elf CComliSerialDriver::Write(unsigned char*, unsigned int*)
000075c8 PhCOMLI_860_68.elf CComliSerialDriver::Read(unsigned char*, unsigned int*)
00007608 PhCOMLI_860_68.elf CComliSerialDriver::ReadBlocked(unsigned char*, unsigned int*, unsigned int)
00007668 PhCOMLI_860_68.elf CComliSerialDriver::BCC(unsigned char*, unsigned int, unsigned int)
0000769c PhCOMLI_860_68.elf CComliSerialDriver::ModifyTxBuffer(int, unsigned char*, unsigned int*)
000077e8 PhCOMLI_860_68.elf CComliSerialDriver::ModifyRxBuffer(int, unsigned char*, unsigned int*)
0000793c PhCOMLI_860_68.elf CComliSerialDriver::operator new(unsigned int, IHeapCallback*)
00007a50 PhCOMLI_860_68.elf CComliSerialDriver::operator delete(void*)
00007aac PhCOMLI_860_68.elf CComliSerialDriver::CComliSerialDriver()
00007aec PhCOMLI_860_68.elf CComliSerialDriver::CComliSerialDriver()
00007b2c PhCOMLI_860_68.elf CSerialDriver::CSerialDriver()
00007b48 PhCOMLI_860_68.elf CSerialDriver::CSerialDriver()
00007b64 PhCOMLI_860_68.elf CSerialDriver::IsModemIdle(bool*)
00007b94 PhCOMLI_860_68.elf CSerialDriver::GetStatus(int*)
00007bc4 PhCOMLI_860_68.elf CSerialDriver::OpenChannel()
00007c0c PhCOMLI_860_68.elf CSerialDriver::CloseChannel()
00007c3c PhCOMLI_860_68.elf CSerialDriver::AbortChannel()
00007c6c PhCOMLI_860_68.elf CSerialDriver::wd(int*)
00007c9c PhCOMLI_860_68.elf CSerialDriver::GetFITLevel()
00007ca8 PhCOMLI_860_68.elf CSerialDriver::CheckSerialInterfacePtr()
00007cc4 PhCOMLI_860_68.elf operator delete(void*)
00007d00 PhCOMLI_860_68.elf __cxa_pure_virtual
00007d38 PhCOMLI_860_68.elf CPhCommon_Base::CPhCommon_Base()
00007d9c PhCOMLI_860_68.elf CPhCommon_Base::CPhCommon_Base()
00007dfc PhCOMLI_860_68.elf CPhCommon_Base::GetProductInfo(unsigned char*, unsigned char*, unsigned char*, unsigned long)
00007e38 PhCOMLI_860_68.elf CPhCommon_Base::SetCommonCallbackInterface(ICommonCallback*)
00007e68 PhCOMLI_860_68.elf CPhConfig_Base1::PrepareForTermination(teHWFErrorCode*)
00007e98 PhCOMLI_860_68.elf CPhConfig_Base1::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode*)
00007ec8 PhCOMLI_860_68.elf CPhConfig_Base1::RemoveIoConnection(unsigned long, teHWFErrorCode*)
00007efc PhCOMLI_860_68.elf CPhConfig_Base1::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode*)
00007f2c PhCOMLI_860_68.elf CPhConfig_Base1::PhResponsibility(trHWFAddress, teHWFErrorCode*)
00007f5c PhCOMLI_860_68.elf CPhConfig_Base1::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode*)
00007f90 PhCOMLI_860_68.elf CPhConfig_Base1::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode*)
00007fc0 PhCOMLI_860_68.elf CPhConfig_Base1::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode*)
00007ff0 PhCOMLI_860_68.elf CPhConfig_Base1::PerformSwitchover(trHWFAddress, teHWFErrorCode*)
00008020 PhCOMLI_860_68.elf CPhConfig_Base1::StartUsingDevice(trHWFAddress, teHWFErrorCode*)
00008050 PhCOMLI_860_68.elf CPhConfig_Base1::PerformFailover(trHWFAddress, teHWFErrorCode*)
00008080 PhCOMLI_860_68.elf CPhClient_Base::ConnectReq(unsigned long, unsigned long*, int*)
000080b8 PhCOMLI_860_68.elf CPhClient_Base::DisconnectReq(unsigned long, unsigned long, int*)
000080f0 PhCOMLI_860_68.elf CPhClient_Base::ReadVarReq(unsigned long, int*)
00008124 PhCOMLI_860_68.elf CPhClient_Base::WriteVarReq(unsigned long, int*)
00008158 PhCOMLI_860_68.elf CPhClient_Base::ReadRawReq(unsigned long, int*)
0000818c PhCOMLI_860_68.elf CPhClient_Base::WriteRawReq(unsigned long, int*)
000081c0 PhCOMLI_860_68.elf CPhClient_Base::AbortRawReq(unsigned long, int*)
000081f4 PhCOMLI_860_68.elf CPhClient_Base::AbortVarReq(unsigned long, int*)
00008228 PhCOMLI_860_68.elf CPhClient_Base::GetExtendedStatusSize(unsigned long, int*, int*)
00008260 PhCOMLI_860_68.elf CPhClient_Base::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
000082a0 PhCOMLI_860_68.elf CPhClient_Base::SetStatus(unsigned long, int, int*)
000082d8 PhCOMLI_860_68.elf CPhClient_Base::ReadRes(unsigned long, int, int*)
00008310 PhCOMLI_860_68.elf CPhClient_Base::WriteRes(unsigned long, int, int*)
00008348 PhCOMLI_860_68.elf CPhClient_Base1::ConnectReq(unsigned long, unsigned long*, int*)
00008380 PhCOMLI_860_68.elf CPhClient_Base1::DisconnectReq(unsigned long, unsigned long, int*)
000083b8 PhCOMLI_860_68.elf CPhClient_Base1::ReadVarReq(unsigned long, int*)
000083ec PhCOMLI_860_68.elf CPhClient_Base1::WriteVarReq(unsigned long, int*)
00008420 PhCOMLI_860_68.elf CPhClient_Base1::RegisterVarReq(unsigned long, int*)
00008454 PhCOMLI_860_68.elf CPhClient_Base1::ReadRawReq(unsigned long, int*)
00008488 PhCOMLI_860_68.elf CPhClient_Base1::WriteRawReq(unsigned long, int*)
000084bc PhCOMLI_860_68.elf CPhClient_Base1::AbortRawReq(unsigned long, int*)
000084f0 PhCOMLI_860_68.elf CPhClient_Base1::AbortVarReq(unsigned long, int*)
00008524 PhCOMLI_860_68.elf CPhClient_Base1::TimeoutAbortVarReq(unsigned long, int*)
00008588 PhCOMLI_860_68.elf CPhClient_Base1::GetExtendedStatusSize(unsigned long, int*, int*)
000085c0 PhCOMLI_860_68.elf CPhClient_Base1::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
00008600 PhCOMLI_860_68.elf CPhClient_Base1::BufferTakeForReceive(unsigned long, int*)
00008634 PhCOMLI_860_68.elf CPhClient_Base1::BufferGiveForReceive(unsigned long, int, int*)
0000866c PhCOMLI_860_68.elf CPhClient_Base1::BufferTakeForSend(unsigned long, unsigned int, int*)
000086a4 PhCOMLI_860_68.elf CPhClient_Base1::BufferGiveForSend(unsigned long, unsigned int, int, int*)
000086e0 PhCOMLI_860_68.elf CPhClient_Base1::SetStatus(unsigned long, int, int*)
00008718 PhCOMLI_860_68.elf CPhClient_Base1::ReadRes(unsigned long, int, int*)
00008750 PhCOMLI_860_68.elf CPhClient_Base1::WriteRes(unsigned long, int, int*)
00008788 PhCOMLI_860_68.elf CPhStatus_Base1::KickWatchdog(unsigned short*, teHWFErrorCode*)
000087bc PhCOMLI_860_68.elf CPhStatus_Base1::GetStatus(trHWFAddress, teHWFUnitKind, unsigned long*, unsigned long*, teHWFErrorCode*)
000087f8 PhCOMLI_860_68.elf CPhIOAccess_Base::GetCopyRoutineReference(unsigned int, void (**)(short, void*, void*), IOAccessErrorCode*)
00008830 PhCOMLI_860_68.elf CPhIOAccess_Base::ObtainDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
00008864 PhCOMLI_860_68.elf CPhIOAccess_Base::ReleaseDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
00008898 PhCOMLI_860_68.elf CPhDiagnostics_Base::PhDiagnosticsTableNew(teDiagErrorCode*)
000088c8 PhCOMLI_860_68.elf CPhDiagnostics_Base::PhDiagnosticsTableCleared(teDiagErrorCode*)
000088f8 PhCOMLI_860_68.elf CPhOLU_Base::PrepareForFirmwareDownload(trHWFAddress const*, unsigned long, eOLUStatus*)
00008930 PhCOMLI_860_68.elf CPhOLU_Base::PrepareForApplicationStop(trHWFAddress const*, eOLUStatus*)
00008964 PhCOMLI_860_68.elf CPhOLU_Base::ResumeOperation(trHWFAddress const*, eOLUStatus*)
00008998 PhCOMLI_860_68.elf CPhOLU_Base::PhResponsibilityForOLU(trHWFAddress const*, eOLUStatus*)
000089cc PhCOMLI_860_68.elf CPhOLU_Base::PrepareForLeavingOLU(trHWFAddress const*, eOLUStatus*)
00008a00 PhCOMLI_860_68.elf CPhOLU_Base::PrepareForAppAndConfigDownload(trHWFAddress const*, eOLUStatus*)
00008a34 PhCOMLI_860_68.elf CPhOLU_Base1::PrepareForFirmwareDownload(trHWFAddress const*, unsigned long, eOLUStatus*)
00008a6c PhCOMLI_860_68.elf CPhOLU_Base1::PrepareForApplicationStop(trHWFAddress const*, eOLUStatus*)
00008aa0 PhCOMLI_860_68.elf CPhOLU_Base1::ResumeOperation(trHWFAddress const*, eOLUStatus*)
00008ad4 PhCOMLI_860_68.elf CPhOLU_Base1::PhResponsibilityForOLU(trHWFAddress const*, eOLUStatus*)
00008b08 PhCOMLI_860_68.elf CPhOLU_Base1::PrepareForLeavingOLU(trHWFAddress const*, eOLUStatus*)
00008b3c PhCOMLI_860_68.elf CPhOLU_Base1::PrepareForAppAndConfigDownload(trHWFAddress const*, eOLUStatus*)
00008b70 PhCOMLI_860_68.elf CPhOLU_Base1::OLUEnablePhCom(trHWFAddress const*, eOLUStatus*)
00008ba4 PhCOMLI_860_68.elf CPhOLU_Base1::OLUDisablePhCom(trHWFAddress const*, eOLUStatus*)
00008bd8 PhCOMLI_860_68.elf CPhOLU_Base1::InformPhIsInSwitch(trHWFAddress const*, eOLUStatus*)
00008c10 PhCOMLI_860_68.elf CPhCommon_Base::~CPhCommon_Base()
00008c8c PhCOMLI_860_68.elf CPhCommon_Base::~CPhCommon_Base()
00008d08 PhCOMLI_860_68.elf CPhCommon_Base::~CPhCommon_Base()
00008d80 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::AddRef()
00008d88 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::AddRef()
00008d90 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::AddRef()
00008d98 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::AddRef()
00008da0 PhCOMLI_860_68.elf CPhCOMLI::AddRef()
00008dc0 PhCOMLI_860_68.elf IUnknown::~IUnknown()
00008e04 PhCOMLI_860_68.elf IUnknown::~IUnknown()
00008e44 PhCOMLI_860_68.elf IPhStatus1::~IPhStatus1()
00008e88 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::QueryInterface(_GUID const&, void**)
00008e90 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::QueryInterface(_GUID const&, void**)
00008e98 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::QueryInterface(_GUID const&, void**)
00008ea0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::QueryInterface(_GUID const&, void**)
00008eac PhCOMLI_860_68.elf CPhCOMLI::QueryInterface(_GUID const&, void**)
00008fdc PhCOMLI_860_68.elf IPhConfig1::~IPhConfig1()
00009028 PhCOMLI_860_68.elf IPhConfig1::~IPhConfig1()
00009070 PhCOMLI_860_68.elf IPhClient1::~IPhClient1()
000090bc PhCOMLI_860_68.elf IPhClient1::~IPhClient1()
00009104 PhCOMLI_860_68.elf IPhClient::~IPhClient()
00009150 PhCOMLI_860_68.elf IPhClient::~IPhClient()
00009198 PhCOMLI_860_68.elf IPhStatus1::~IPhStatus1()
000091e0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::Release()
000091e8 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::Release()
000091f0 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::Release()
000091f8 PhCOMLI_860_68.elf non-virtual thunk to CPhCOMLI::Release()
00009200 PhCOMLI_860_68.elf CPhCOMLI::Release()
00009270 PhCOMLI_860_68.elf node::operator new(unsigned int, IHeapCallback*)
00009358 PhCOMLI_860_68.elf IUnknown::IUnknown()
000093b0 PhCOMLI_860_68.elf IPhCommon::IPhCommon()
00009414 PhCOMLI_860_68.elf IUnknown::~IUnknown()
00009484 PhCOMLI_860_68.elf IPhConfig1::~IPhConfig1()
00009500 PhCOMLI_860_68.elf CPhConfig_Base1::~CPhConfig_Base1()
0000957c PhCOMLI_860_68.elf CPhConfig_Base1::~CPhConfig_Base1()
000095f8 PhCOMLI_860_68.elf IPhClient::~IPhClient()
00009674 PhCOMLI_860_68.elf CPhClient_Base::~CPhClient_Base()
000096f0 PhCOMLI_860_68.elf CPhClient_Base::~CPhClient_Base()
0000976c PhCOMLI_860_68.elf IPhClient1::~IPhClient1()
000097e8 PhCOMLI_860_68.elf CPhClient_Base1::~CPhClient_Base1()
00009864 PhCOMLI_860_68.elf CPhClient_Base1::~CPhClient_Base1()
000098e0 PhCOMLI_860_68.elf IPhStatus1::~IPhStatus1()
0000995c PhCOMLI_860_68.elf CPhStatus_Base1::~CPhStatus_Base1()
000099d8 PhCOMLI_860_68.elf CPhStatus_Base1::~CPhStatus_Base1()
00009a54 PhCOMLI_860_68.elf IPhIOAccess::~IPhIOAccess()
00009ad0 PhCOMLI_860_68.elf CPhIOAccess_Base::~CPhIOAccess_Base()
00009b4c PhCOMLI_860_68.elf IPhIOAccess::~IPhIOAccess()
00009bc8 PhCOMLI_860_68.elf IPhIOAccess::~IPhIOAccess()
00009c44 PhCOMLI_860_68.elf CPhIOAccess_Base::~CPhIOAccess_Base()
00009cc0 PhCOMLI_860_68.elf IPhDiagnostics::~IPhDiagnostics()
00009d3c PhCOMLI_860_68.elf CPhDiagnostics_Base::~CPhDiagnostics_Base()
00009db8 PhCOMLI_860_68.elf IPhDiagnostics::~IPhDiagnostics()
00009e34 PhCOMLI_860_68.elf IPhDiagnostics::~IPhDiagnostics()
00009eb0 PhCOMLI_860_68.elf CPhDiagnostics_Base::~CPhDiagnostics_Base()
00009f2c PhCOMLI_860_68.elf IPhOLU::~IPhOLU()
00009fa8 PhCOMLI_860_68.elf CPhOLU_Base::~CPhOLU_Base()
0000a024 PhCOMLI_860_68.elf IPhOLU::~IPhOLU()
0000a0a0 PhCOMLI_860_68.elf IPhOLU::~IPhOLU()
0000a11c PhCOMLI_860_68.elf CPhOLU_Base::~CPhOLU_Base()
0000a198 PhCOMLI_860_68.elf IPhOLU1::~IPhOLU1()
0000a214 PhCOMLI_860_68.elf CPhOLU_Base1::~CPhOLU_Base1()
0000a290 PhCOMLI_860_68.elf IPhOLU1::~IPhOLU1()
0000a30c PhCOMLI_860_68.elf IPhOLU1::~IPhOLU1()
0000a388 PhCOMLI_860_68.elf CPhOLU_Base1::~CPhOLU_Base1()
0000a404 PhCOMLI_860_68.elf IPhCommon::~IPhCommon()
0000a480 PhCOMLI_860_68.elf IPhCommon::~IPhCommon()
0000a4fc PhCOMLI_860_68.elf IPhCommon::~IPhCommon()
0000a588 PhCOMLI_860_68.elf CompanyName
0000a58c PhCOMLI_860_68.elf ProductName
0000a594 PhCOMLI_860_68.elf ProductVersion
0000a5b0 PhCOMLI_860_68.elf node::operator new(unsigned int, IHeapCallback*)::C$3
0000a710 PhCOMLI_860_68.elf FlipDataByte
0000a810 PhCOMLI_860_68.elf CLSID_CPhCOMLI
0000a878 PhCOMLI_860_68.elf IID_IPhCommonCB
0000a888 PhCOMLI_860_68.elf IID_IPhConfigCB
0000a898 PhCOMLI_860_68.elf IID_IPhConfigCB1
0000a8a8 PhCOMLI_860_68.elf IID_IPhIOAccessCB
0000a8b8 PhCOMLI_860_68.elf IID_IPhExternalConfigCB1
0000a8c8 PhCOMLI_860_68.elf IID_IPhExternalConfigCB2
0000a8d8 PhCOMLI_860_68.elf IID_IPhExternalConfigCB3
0000a8e8 PhCOMLI_860_68.elf IID_IPhOLUCB
0000a8f8 PhCOMLI_860_68.elf IID_IPhCommon
0000a908 PhCOMLI_860_68.elf IID_IPhConfig1
0000a918 PhCOMLI_860_68.elf IID_IPhStatus1
0000a928 PhCOMLI_860_68.elf IID_IPhClient
0000a938 PhCOMLI_860_68.elf IID_IPhClient1
0000a948 PhCOMLI_860_68.elf IID_IPhDiagnostics
0000a958 PhCOMLI_860_68.elf IID_IPhIOAccess
0000a968 PhCOMLI_860_68.elf IID_IPhSafeConfig
0000a978 PhCOMLI_860_68.elf IID_IPhSafeConfig1
0000a988 PhCOMLI_860_68.elf IID_IPhSafeConfig2
0000a998 PhCOMLI_860_68.elf IID_IPhSimulation
0000a9a8 PhCOMLI_860_68.elf IID_IPhOLU
0000a9b8 PhCOMLI_860_68.elf IID_IPhOLU1
0000a9c8 PhCOMLI_860_68.elf IID_IHeapCallback
0000a9d8 PhCOMLI_860_68.elf IID_ISystemUtilitiesCallback
0000a9e8 PhCOMLI_860_68.elf IID_ISystemUtilitiesCallback1
0000a9f8 PhCOMLI_860_68.elf IID_ISystemUtilitiesCallback2
0000aa08 PhCOMLI_860_68.elf IID_ISystemUtilitiesCallback3
0000aa18 PhCOMLI_860_68.elf IID_ISystemUtilitiesCallback4
0000aa28 PhCOMLI_860_68.elf IID_IEventMgrCallback
0000aa38 PhCOMLI_860_68.elf IID_IEventMgrCallback1
0000aa48 PhCOMLI_860_68.elf IID_ISysClockCallback
0000aa58 PhCOMLI_860_68.elf IID_ISysClockCallback1
0000aa68 PhCOMLI_860_68.elf IID_ISysClockCallback2
0000aa78 PhCOMLI_860_68.elf IID_ISysClockCallback3
0000aa88 PhCOMLI_860_68.elf IID_INetwClockSynchCallback
0000aa98 PhCOMLI_860_68.elf IID_IConfigCBCallback1
0000aaa8 PhCOMLI_860_68.elf IID_IConfigCBCallback2
0000aab8 PhCOMLI_860_68.elf IID_IConfigCBCallback3
0000aac8 PhCOMLI_860_68.elf IID_IExternalConfigCBCallback
0000aad8 PhCOMLI_860_68.elf IID_IExternalConfigCBCallback2
0000aae8 PhCOMLI_860_68.elf IID_IExternalConfigCBCallback3
0000aaf8 PhCOMLI_860_68.elf IID_IExternalConfigCBCallback4
0000ab08 PhCOMLI_860_68.elf IID_IMessagesCBCallback
0000ab18 PhCOMLI_860_68.elf IID_IAIPAccessCBCallback
0000ab28 PhCOMLI_860_68.elf IID_IOLUCBCallback
0000ab38 PhCOMLI_860_68.elf IID_ISystemUtilitiesCBCallback1
0000ab48 PhCOMLI_860_68.elf IID_IConfigCallback1
0000ab58 PhCOMLI_860_68.elf IID_IConfigCallback2
0000ab68 PhCOMLI_860_68.elf IID_IStatusCallback1
0000ab78 PhCOMLI_860_68.elf IID_IGenClientCallback
0000ab88 PhCOMLI_860_68.elf IID_IGenClientCallback1
0000ab98 PhCOMLI_860_68.elf IID_IIACClientCallback
0000aba8 PhCOMLI_860_68.elf IID_IDriverFactoryCallback
0000abb8 PhCOMLI_860_68.elf IID_IDiagnosticsCallback
0000abc8 PhCOMLI_860_68.elf IID_ISafeConfigCallback
0000abd8 PhCOMLI_860_68.elf IID_ISafeConfigCallback1
0000abe8 PhCOMLI_860_68.elf IID_ISafeConfigCallback2
0000abf8 PhCOMLI_860_68.elf IID_ICRCCallback
0000ac08 PhCOMLI_860_68.elf IID_IIOAccessCallback
0000ac18 PhCOMLI_860_68.elf IID_CriticalRegionCallback
0000ac28 PhCOMLI_860_68.elf IID_VOSExceptionCallback
0000ac38 PhCOMLI_860_68.elf IID_DrvCommonCallback
0000ac48 PhCOMLI_860_68.elf IID_ProtectedMirroredHeapCallback
0000ac58 PhCOMLI_860_68.elf IID_SharedMirroredHeapCallback
0000ac68 PhCOMLI_860_68.elf IID_TemporaryMirroredHeapCallback
0000ac78 PhCOMLI_860_68.elf IID_IRestrictedVOSCallback
0000ac88 PhCOMLI_860_68.elf IID_IVarServerCallback
0000ac98 PhCOMLI_860_68.elf IID_IVarServerCallback1
0000aca8 PhCOMLI_860_68.elf IID_ISOCKETCallback
0000acb8 PhCOMLI_860_68.elf IID_ISOCKETCallback1
0000acc8 PhCOMLI_860_68.elf IID_IVOSCallback2
0000c860 V vtable for CPhCOMLI PhCOMLI_860_68.elf 
0000ca18 V vtable for IPhClient1 PhCOMLI_860_68.elf 
0000ca80 V vtable for IUnknown PhCOMLI_860_68.elf 
0000caa0 V vtable for IPhClient PhCOMLI_860_68.elf 
0000caf0 V vtable for IPhStatus1 PhCOMLI_860_68.elf 
0000cb18 V vtable for IPhConfig1 PhCOMLI_860_68.elf 
0000cb60 V vtable for CPhOLU_Base1 PhCOMLI_860_68.elf 
0000cba0 V vtable for CPhOLU_Base PhCOMLI_860_68.elf 
0000cbd8 V vtable for CPhDiagnostics_Base PhCOMLI_860_68.elf 
0000cc00 V vtable for CPhIOAccess_Base PhCOMLI_860_68.elf 
0000cc28 V vtable for CPhStatus_Base1 PhCOMLI_860_68.elf 
0000cc50 V vtable for CPhClient_Base1 PhCOMLI_860_68.elf 
0000ccb8 V vtable for CPhClient_Base PhCOMLI_860_68.elf 
0000cd08 V vtable for CPhConfig_Base1 PhCOMLI_860_68.elf 
0000cd50 V vtable for CPhCommon_Base PhCOMLI_860_68.elf 
0000cd78 V vtable for IPhIOAccess PhCOMLI_860_68.elf 
0000cda0 V vtable for IPhDiagnostics PhCOMLI_860_68.elf 
0000cdc8 V vtable for IPhOLU PhCOMLI_860_68.elf 
0000ce00 V vtable for IPhOLU1 PhCOMLI_860_68.elf 
0000ce40 V vtable for IPhCommon PhCOMLI_860_68.elf 
0000ce64 PhCOMLI_860_68.elf CRTFuncTabBegin
0000ce64 PhCOMLI_860_68.elf scprocs
0000ce70 PhCOMLI_860_68.elf printf
0000ce74 PhCOMLI_860_68.elf sprintf
0000ce78 PhCOMLI_860_68.elf sscanf
0000ce7c PhCOMLI_860_68.elf memcpy
0000ce80 PhCOMLI_860_68.elf memset
0000ce84 PhCOMLI_860_68.elf strcat
0000ce88 PhCOMLI_860_68.elf strcmp
0000ce8c PhCOMLI_860_68.elf strlen
0000ce90 PhCOMLI_860_68.elf strncmp
0000ce94 PhCOMLI_860_68.elf strncpy
0000ce98 PhCOMLI_860_68.elf memchr
0000ce9c PhCOMLI_860_68.elf memcmp
0000cea0 PhCOMLI_860_68.elf memmove
0000cea4 PhCOMLI_860_68.elf strchr
0000cea8 PhCOMLI_860_68.elf strcoll
0000ceac PhCOMLI_860_68.elf strcpy
0000ceb0 PhCOMLI_860_68.elf strcspn
0000ceb4 PhCOMLI_860_68.elf strncat
0000ceb8 PhCOMLI_860_68.elf strpbrk
0000cebc PhCOMLI_860_68.elf strrchr
0000cec0 PhCOMLI_860_68.elf strspn
0000cec4 PhCOMLI_860_68.elf strstr
0000cec8 PhCOMLI_860_68.elf strtok
0000cecc PhCOMLI_860_68.elf strxfrm
0000ced0 PhCOMLI_860_68.elf strerror
0000ced4 PhCOMLI_860_68.elf pow
0000ced8 PhCOMLI_860_68.elf acos
0000cedc PhCOMLI_860_68.elf asin
0000cee0 PhCOMLI_860_68.elf atan
0000cee4 PhCOMLI_860_68.elf atan2
0000cee8 PhCOMLI_860_68.elf ceil
0000ceec PhCOMLI_860_68.elf cos
0000cef0 PhCOMLI_860_68.elf cosh
0000cef4 PhCOMLI_860_68.elf exp
0000cef8 PhCOMLI_860_68.elf fabs
0000cefc PhCOMLI_860_68.elf floor
0000cf00 PhCOMLI_860_68.elf fmod
0000cf04 PhCOMLI_860_68.elf frexp
0000cf08 PhCOMLI_860_68.elf ldexp
0000cf0c PhCOMLI_860_68.elf log
0000cf10 PhCOMLI_860_68.elf log10
0000cf14 PhCOMLI_860_68.elf modf
0000cf18 PhCOMLI_860_68.elf sin
0000cf1c PhCOMLI_860_68.elf sinh
0000cf20 PhCOMLI_860_68.elf sqrt
0000cf24 PhCOMLI_860_68.elf tan
0000cf28 PhCOMLI_860_68.elf tanh
0000cf2c PhCOMLI_860_68.elf acosf
0000cf30 PhCOMLI_860_68.elf asinf
0000cf34 PhCOMLI_860_68.elf atanf
0000cf38 PhCOMLI_860_68.elf atan2f
0000cf3c PhCOMLI_860_68.elf ceilf
0000cf40 PhCOMLI_860_68.elf cosf
0000cf44 PhCOMLI_860_68.elf coshf
0000cf48 PhCOMLI_860_68.elf expf
0000cf4c PhCOMLI_860_68.elf fabsf
0000cf50 PhCOMLI_860_68.elf floorf
0000cf54 PhCOMLI_860_68.elf fmodf
0000cf58 PhCOMLI_860_68.elf logf
0000cf5c PhCOMLI_860_68.elf log10f
0000cf60 PhCOMLI_860_68.elf powf
0000cf64 PhCOMLI_860_68.elf sinf
0000cf68 PhCOMLI_860_68.elf sinhf
0000cf6c PhCOMLI_860_68.elf sqrtf
0000cf70 PhCOMLI_860_68.elf tanf
0000cf74 PhCOMLI_860_68.elf tanhf
0000cf78 PhCOMLI_860_68.elf div_r
0000cf7c PhCOMLI_860_68.elf labs
0000cf80 PhCOMLI_860_68.elf strtol
0000cf84 PhCOMLI_860_68.elf free
0000cf88 PhCOMLI_860_68.elf abort
0000cf8c PhCOMLI_860_68.elf abs
0000cf90 PhCOMLI_860_68.elf atof
0000cf94 PhCOMLI_860_68.elf atoi
0000cf98 PhCOMLI_860_68.elf atol
0000cf9c PhCOMLI_860_68.elf bsearch
0000cfa0 PhCOMLI_860_68.elf ldiv_r
0000cfa4 PhCOMLI_860_68.elf qsort
0000cfa8 PhCOMLI_860_68.elf rand
0000cfac PhCOMLI_860_68.elf srand
0000cfb0 PhCOMLI_860_68.elf strtod
0000cfb4 PhCOMLI_860_68.elf strtoul
0000cfb8 PhCOMLI_860_68.elf malloc
0000cfbc PhCOMLI_860_68.elf __assert
0000cfc0 PhCOMLI_860_68.elf time
0000cfc4 PhCOMLI_860_68.elf asctime
0000cfc8 PhCOMLI_860_68.elf gmtime
0000cfcc PhCOMLI_860_68.elf clock
0000cfd0 PhCOMLI_860_68.elf ctime
0000cfd4 PhCOMLI_860_68.elf difftime
0000cfd8 PhCOMLI_860_68.elf localtime
0000cfdc PhCOMLI_860_68.elf mktime
0000cfe0 PhCOMLI_860_68.elf strftime
0000cfe4 PhCOMLI_860_68.elf eventcollSem
0000cfe8 PhCOMLI_860_68.elf intLock
0000cfec PhCOMLI_860_68.elf intUnlock
0000cff0 PhCOMLI_860_68.elf _fabs
0000cff4 PhCOMLI_860_68.elf _ddec
0000cff8 PhCOMLI_860_68.elf _d_mul
0000cffc PhCOMLI_860_68.elf __floatsidf
0000d000 PhCOMLI_860_68.elf _d_sub
0000d004 PhCOMLI_860_68.elf _d_add
0000d008 PhCOMLI_860_68.elf __fixunsdfsi
0000d00c PhCOMLI_860_68.elf __extendsfdf2
0000d010 PhCOMLI_860_68.elf __adddf3
0000d014 PhCOMLI_860_68.elf _dinc
0000d018 PhCOMLI_860_68.elf __fixdfsi
0000d01c PhCOMLI_860_68.elf _d_neg
0000d020 PhCOMLI_860_68.elf _d_dtof
0000d024 PhCOMLI_860_68.elf _f_qtof
0000d028 PhCOMLI_860_68.elf _dpfabs
0000d02c PhCOMLI_860_68.elf _d_dtoq
0000d030 PhCOMLI_860_68.elf _d_div
0000d034 PhCOMLI_860_68.elf __negdf2
0000d038 PhCOMLI_860_68.elf __divdf3
0000d03c PhCOMLI_860_68.elf __muldf3
0000d040 PhCOMLI_860_68.elf _d_dtoi
0000d044 PhCOMLI_860_68.elf _f_ftoq
0000d048 PhCOMLI_860_68.elf __truncdfsf2
0000d04c PhCOMLI_860_68.elf _fp_round
0000d050 PhCOMLI_860_68.elf _d_utod
0000d054 PhCOMLI_860_68.elf _d_qtod
0000d058 PhCOMLI_860_68.elf _d_dtou
0000d05c PhCOMLI_860_68.elf _d_itod
0000d060 PhCOMLI_860_68.elf __subdf3
0000d064 PhCOMLI_860_68.elf _f_ftod
0000d068 PhCOMLI_860_68.elf _d_feq
0000d06c PhCOMLI_860_68.elf __gtdf2
0000d070 PhCOMLI_860_68.elf _d_fne
0000d074 PhCOMLI_860_68.elf _d_cmp
0000d078 PhCOMLI_860_68.elf _d_flt
0000d07c PhCOMLI_860_68.elf _d_cmpe
0000d080 PhCOMLI_860_68.elf __nedf2
0000d084 PhCOMLI_860_68.elf _d_fgt
0000d088 PhCOMLI_860_68.elf _d_fle
0000d08c PhCOMLI_860_68.elf _d_fge
0000d090 PhCOMLI_860_68.elf _fdec
0000d094 PhCOMLI_860_68.elf _f_add
0000d098 PhCOMLI_860_68.elf __divsf3
0000d09c PhCOMLI_860_68.elf __fixsfsi
0000d0a0 PhCOMLI_860_68.elf __subsf3
0000d0a4 PhCOMLI_860_68.elf _finc
0000d0a8 PhCOMLI_860_68.elf _f_neg
0000d0ac PhCOMLI_860_68.elf _f_sub
0000d0b0 PhCOMLI_860_68.elf _f_itof
0000d0b4 PhCOMLI_860_68.elf _fabsf
0000d0b8 PhCOMLI_860_68.elf _f_utof
0000d0bc PhCOMLI_860_68.elf _fpfabs
0000d0c0 PhCOMLI_860_68.elf __floatsisf
0000d0c4 PhCOMLI_860_68.elf _f_div
0000d0c8 PhCOMLI_860_68.elf __negsf2
0000d0cc PhCOMLI_860_68.elf __mulsf3
0000d0d0 PhCOMLI_860_68.elf _f_ftoi
0000d0d4 PhCOMLI_860_68.elf _f_mul
0000d0d8 PhCOMLI_860_68.elf __fixunssfsi
0000d0dc PhCOMLI_860_68.elf _f_ftou
0000d0e0 PhCOMLI_860_68.elf __addsf3
0000d0e4 PhCOMLI_860_68.elf _f_feq
0000d0e8 PhCOMLI_860_68.elf _f_flt
0000d0ec PhCOMLI_860_68.elf _f_fle
0000d0f0 PhCOMLI_860_68.elf __nesf2
0000d0f4 PhCOMLI_860_68.elf __gtsf2
0000d0f8 PhCOMLI_860_68.elf _f_fge
0000d0fc PhCOMLI_860_68.elf _f_fgt
0000d100 PhCOMLI_860_68.elf _f_fne
0000d104 PhCOMLI_860_68.elf _f_cmp
0000d108 PhCOMLI_860_68.elf _f_cmpe
0000d10c PhCOMLI_860_68.elf ldexpf
0000d110 PhCOMLI_860_68.elf modff
0000d114 PhCOMLI_860_68.elf frexpf
0000d118 PhCOMLI_860_68.elf exadd
0000d11c PhCOMLI_860_68.elf exmul
0000d120 PhCOMLI_860_68.elf sigmax
0000d124 PhCOMLI_860_68.elf exdiv
0000d128 PhCOMLI_860_68.elf exsub
0000d12c PhCOMLI_860_68.elf __eqdf2
0000d130 PhCOMLI_860_68.elf __ltdf2
0000d134 PhCOMLI_860_68.elf __lesf2
0000d138 PhCOMLI_860_68.elf __ledf2
0000d13c PhCOMLI_860_68.elf __eqsf2
0000d140 PhCOMLI_860_68.elf __ltsf2
0000d144 PhCOMLI_860_68.elf __gesf2
0000d148 PhCOMLI_860_68.elf __gedf2
0000d154 PhCOMLI_860_68.elf fprintf
0000d158 PhCOMLI_860_68.elf __stdout
0000d15c PhCOMLI_860_68.elf __stderr
0000d160 PhCOMLI_860_68.elf setjmp
0000d164 PhCOMLI_860_68.elf longjmp
0000d168 PhCOMLI_860_68.elf operator new[](unsigned int)
0000d16c PhCOMLI_860_68.elf operator delete[](void*)
0000d170 PhCOMLI_860_68.elf __floatunsisf
0000d174 PhCOMLI_860_68.elf __floatunsidf
0000d178 PhCOMLI_860_68.elf CRTFuncTabEnd
0000d178 PhCOMLI_860_68.elf ecprocs
0000d178 PhCOMLI_860_68.elf etext
0000d178 PhCOMLI_860_68.elf sgot2
0000d4bc PhCOMLI_860_68.elf egot2
0000d4bc PhCOMLI_860_68.elf sfixup
0000db1c PhCOMLI_860_68.elf efixup
0000db1c PhCOMLI_860_68.elf g_pHeapCallback
0000db20 PhCOMLI_860_68.elf m_ComliLLTag
0000db24 PhCOMLI_860_68.elf LAST_INDEX_0F_M_COMLIMESS_BUFFER
0000db28 PhCOMLI_860_68.elf BCC_INDEX
0000db2c PhCOMLI_860_68.elf CMirroredObject::c_pMirroredObjectMgrImpl
0000db30 PhCOMLI_860_68.elf CMirroredObjectAgent::c_pHeapCallback
0000db34 PhCOMLI_860_68.elf CMirroredObjectAgent::c_AgentTag
0000db38 PhCOMLI_860_68.elf CComliSerialDriver::m_TagComli
0000db3c V CComCoClass<CPhCOMLI, &(CLSID_CPhCOMLI)>::m_HeapTag PhCOMLI_860_68.elf 
0000db40 PhCOMLI_860_68.elf PHproperties
0000db48 PhCOMLI_860_68.elf useEXEHEAD
</SYMBOLS>
