<HEAD>
Index of symbols created Tue 05/28/2019 16:09:36.34 
</HEAD>
<SECTIONS=15>
00010000 000293f0 .text
000293f0 00029c38 .got2
00029c38 0002a344 .fixup
0002a344 0002a36c .bss
0002a36c 0002a41c .data
0002a41c 0002ce15 .debug_abbrev
0002ce15 0004be02 .debug_info
0004be02 0005106c .debug_line
0005106c 00053b40 .debug_frame
00053b40 0005d8eb .debug_loc
0005d8eb 00060ac4 .debug_pubnames
00060ac4 00060e4c .debug_aranges
00060e4c 000614f4 .debug_ranges
000614f4 00069045 .debug_str
00069045 00069045 .comment
</SECTIONS>
<SYMBOLS=552>
00000000 PhMODBUS_82xx_68.elf EXE_HEAD
00000064 PhMODBUS_82xx_68.elf CPhMODBUS::StartMasterThread()
00000120 PhMODBUS_82xx_68.elf CPhMODBUS::StartSlaveThread()
000001dc PhMODBUS_82xx_68.elf CModbusMessage::operator new(unsigned int, IHeapCallback*)
000002c4 PhMODBUS_82xx_68.elf CPhMODBUS::StartSupervisorThread()
00000388 PhMODBUS_82xx_68.elf CPhMODBUS::RespondToSupervisorThread(unsigned long, unsigned long)
0000047c PhMODBUS_82xx_68.elf CPhMODBUS::SendMsgToSupervisor(unsigned long, unsigned long)
000005a0 PhMODBUS_82xx_68.elf CPhMODBUS::CreateMasterMsgQ()
00000660 PhMODBUS_82xx_68.elf CPhMODBUS::ReleaseObjectFromHeap(void*, IHeapCallback*)
000006ec PhMODBUS_82xx_68.elf CPhMODBUS::deleteSemaphore()
0000093c PhMODBUS_82xx_68.elf CPhMODBUS::createSemaphore()
00000bd4 PhMODBUS_82xx_68.elf CModbusMessage::CModbusMessage()
00000c64 PhMODBUS_82xx_68.elf CModbusMessage::CModbusMessage()
00000cf4 PhMODBUS_82xx_68.elf CPhMODBUS::GetProductInfo(unsigned char*, unsigned char*, unsigned char*, unsigned long)
00000d84 PhMODBUS_82xx_68.elf CPhMODBUS::RegisterMBThreadwithSupervisorThread(unsigned long, unsigned long, unsigned long)
00000ecc PhMODBUS_82xx_68.elf vosSupervisorThread(int, int, int, int)
00000f5c PhMODBUS_82xx_68.elf CModbusMessage::~CModbusMessage()
00000fa0 PhMODBUS_82xx_68.elf CModbusMessage::~CModbusMessage()
00000fe0 PhMODBUS_82xx_68.elf CModbusMessage::~CModbusMessage()
00001020 PhMODBUS_82xx_68.elf vosSlaveThread(int, int, int, int)
00001084 PhMODBUS_82xx_68.elf vosMasterThread(int, int, int, int)
000010e8 PhMODBUS_82xx_68.elf CPhMODBUS::SetCommonCallbackInterface(ICommonCallback*)
00001538 PhMODBUS_82xx_68.elf CPhMODBUS::CPhMODBUS()
00001688 PhMODBUS_82xx_68.elf CPhMODBUS::CPhMODBUS()
000017d4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::~CPhMODBUS()
000017dc PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::~CPhMODBUS()
000017e4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::~CPhMODBUS()
000017ec PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::~CPhMODBUS()
000017f8 PhMODBUS_82xx_68.elf CPhMODBUS::~CPhMODBUS()
0000199c PhMODBUS_82xx_68.elf CPhMODBUS::~CPhMODBUS()
00001b3c PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::~CPhMODBUS()
00001b44 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::~CPhMODBUS()
00001b4c PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::~CPhMODBUS()
00001b54 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::~CPhMODBUS()
00001b60 PhMODBUS_82xx_68.elf CPhMODBUS::~CPhMODBUS()
00001d08 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::WriteRes(unsigned long, int, int*)
00001d10 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::WriteRes(unsigned long, int, int*)
00001d1c PhMODBUS_82xx_68.elf CPhMODBUS::WriteRes(unsigned long, int, int*)
00001d64 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::ReadRes(unsigned long, int, int*)
00001d6c PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::ReadRes(unsigned long, int, int*)
00001d78 PhMODBUS_82xx_68.elf CPhMODBUS::ReadRes(unsigned long, int, int*)
00001dd4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::SetStatus(unsigned long, int, int*)
00001ddc PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::SetStatus(unsigned long, int, int*)
00001de8 PhMODBUS_82xx_68.elf CPhMODBUS::SetStatus(unsigned long, int, int*)
00001e30 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
00001e38 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
00001e44 PhMODBUS_82xx_68.elf CPhMODBUS::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
00001e8c PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::GetExtendedStatusSize(unsigned long, int*, int*)
00001e94 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::GetExtendedStatusSize(unsigned long, int*, int*)
00001ea0 PhMODBUS_82xx_68.elf CPhMODBUS::GetExtendedStatusSize(unsigned long, int*, int*)
00001ee8 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::AbortRawReq(unsigned long, int*)
00001ef0 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::AbortRawReq(unsigned long, int*)
00001efc PhMODBUS_82xx_68.elf CPhMODBUS::AbortRawReq(unsigned long, int*)
00001f44 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::WriteRawReq(unsigned long, int*)
00001f4c PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::WriteRawReq(unsigned long, int*)
00001f58 PhMODBUS_82xx_68.elf CPhMODBUS::WriteRawReq(unsigned long, int*)
00001fa0 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::ReadRawReq(unsigned long, int*)
00001fa8 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::ReadRawReq(unsigned long, int*)
00001fb4 PhMODBUS_82xx_68.elf CPhMODBUS::ReadRawReq(unsigned long, int*)
00001ffc PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::TimeoutAbortVarReq(unsigned long, int*)
00002008 PhMODBUS_82xx_68.elf CPhMODBUS::TimeoutAbortVarReq(unsigned long, int*)
0000208c PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::AbortVarReq(unsigned long, int*)
00002094 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::AbortVarReq(unsigned long, int*)
000020a0 PhMODBUS_82xx_68.elf CPhMODBUS::AbortVarReq(unsigned long, int*)
00002548 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::WriteVarReq(unsigned long, int*)
00002550 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::WriteVarReq(unsigned long, int*)
0000255c PhMODBUS_82xx_68.elf CPhMODBUS::WriteVarReq(unsigned long, int*)
00002b58 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::ReadVarReq(unsigned long, int*)
00002b60 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::ReadVarReq(unsigned long, int*)
00002b6c PhMODBUS_82xx_68.elf CPhMODBUS::ReadVarReq(unsigned long, int*)
000030e4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::DisconnectReq(unsigned long, unsigned long, int*)
000030ec PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::DisconnectReq(unsigned long, unsigned long, int*)
000030f8 PhMODBUS_82xx_68.elf CPhMODBUS::DisconnectReq(unsigned long, unsigned long, int*)
000036a8 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::ConnectReq(unsigned long, unsigned long*, int*)
000036b0 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::ConnectReq(unsigned long, unsigned long*, int*)
000036bc PhMODBUS_82xx_68.elf CPhMODBUS::ConnectReq(unsigned long, unsigned long*, int*)
00003b0c PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode*)
00003b18 PhMODBUS_82xx_68.elf CPhMODBUS::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode*)
00003b60 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode*)
00003b6c PhMODBUS_82xx_68.elf CPhMODBUS::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode*)
00003bb4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::RemoveIoConnection(unsigned long, teHWFErrorCode*)
00003bc0 PhMODBUS_82xx_68.elf CPhMODBUS::RemoveIoConnection(unsigned long, teHWFErrorCode*)
00003c08 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::StartUsingDevice(trHWFAddress, teHWFErrorCode*)
00003c14 PhMODBUS_82xx_68.elf CPhMODBUS::StartUsingDevice(trHWFAddress, teHWFErrorCode*)
00003c5c PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::PerformFailover(trHWFAddress, teHWFErrorCode*)
00003c68 PhMODBUS_82xx_68.elf CPhMODBUS::PerformFailover(trHWFAddress, teHWFErrorCode*)
00003cb0 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::PerformSwitchover(trHWFAddress, teHWFErrorCode*)
00003cbc PhMODBUS_82xx_68.elf CPhMODBUS::PerformSwitchover(trHWFAddress, teHWFErrorCode*)
00003d04 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode*)
00003d10 PhMODBUS_82xx_68.elf CPhMODBUS::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode*)
00003db4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode*)
00003dc0 PhMODBUS_82xx_68.elf CPhMODBUS::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode*)
000043c8 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode*)
000043d4 PhMODBUS_82xx_68.elf CPhMODBUS::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode*)
00004510 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::PhResponsibility(trHWFAddress, teHWFErrorCode*)
0000451c PhMODBUS_82xx_68.elf CPhMODBUS::PhResponsibility(trHWFAddress, teHWFErrorCode*)
00005048 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::PrepareForTermination(teHWFErrorCode*)
00005054 PhMODBUS_82xx_68.elf CPhMODBUS::PrepareForTermination(teHWFErrorCode*)
000053ec PhMODBUS_82xx_68.elf cConnList::SetConnectionStatusForAll(int)
00005588 PhMODBUS_82xx_68.elf cConnList::ConnListInitialize(unsigned int, IVOSCallback2*, IGenClientCallback*, IHeapCallback*)
000056c0 PhMODBUS_82xx_68.elf cConnList::DeleteAllConnections(IHeapCallback*)
00005898 PhMODBUS_82xx_68.elf cConnList::Free_Node(unsigned long, IHeapCallback*)
00005b18 PhMODBUS_82xx_68.elf cConnList::ResetTime_Node(unsigned long)
00005d04 PhMODBUS_82xx_68.elf cConnList::Insert_Node(unsigned long, IHeapCallback*, int*)
0000601c PhMODBUS_82xx_68.elf cConnList::~cConnList()
000060f4 PhMODBUS_82xx_68.elf cConnList::~cConnList()
000061c8 PhMODBUS_82xx_68.elf cConnList::cConnList()
00006220 PhMODBUS_82xx_68.elf cConnList::cConnList()
0000627c PhMODBUS_82xx_68.elf CPhMODBUS::WriteFITCRC(CModbusMessage*)
00006310 PhMODBUS_82xx_68.elf CPhMODBUS::ModifyTxBuffer(int, CModbusMessage*)
00006338 PhMODBUS_82xx_68.elf CPhMODBUS::ModifyRxBuffer(int, CModbusMessage*)
00006544 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::operator new(unsigned int, IHeapCallback*)
00006630 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::SetTraceInterface(cTracelog*)
00006644 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::GetErrorString(teErrorType, int)
000066fc PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::GetSlaveMsgQHandle()
00006710 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::OpenClose()
000068bc PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::CreateSlaveMsgQ()
0000697c PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::GetMBRequestName(unsigned char)
00006a28 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::GetPendingByteSize(unsigned char*, unsigned int, unsigned int&)
00006c04 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::SetExceptionAndDiagnosticAddress(int, int)
00006cc8 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::ConvertDataFormat(unsigned char, unsigned int)
00006fbc PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::SetCallBackDrvInterfacePointers(ISerialDrvCallback*)
0000704c PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::SetCallBackInterfacePointers(IVarServerCallback*, IVOSCallback2*)
00007118 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::CheckServerAddress()
00007234 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::SetServerAddress(unsigned int)
00007298 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::CheckMBRequestAddresRange()
00007864 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::CheckMBRequestFunctionCode()
000079f0 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::CheckMBRequestFrameSize()
00007bb4 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::SetAppDataToVarServer(unsigned int, unsigned int, teIEC1131Type)
00007cdc PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::GetAppDataFromVarServer(unsigned int, unsigned int, teIEC1131Type)
00007e04 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::GetCRC16ForMBFrame(unsigned int&, unsigned char*)
00007ef4 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::CheckCRCInIncomingMBRequestFrame()
00008018 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::GenerateCRC16ForMBRespFrame()
000080ac PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::SendMBRespToMBClient()
00008194 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::GenerateExceptionMBResponse(unsigned int)
00008280 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::IsValidIncomingMBRequest(bool&)
00008528 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::ClearDataBuffer()
000085cc PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::GeneratePositiveMBResponse()
00008954 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::ParseIncomingMBRequest()
00008dcc PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::ReceiveMBReqFromClient()
00009170 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::HandleIncomingMBClientRequest()
00009430 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::~CPhMODBUSServerMgr()
000094a0 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::~CPhMODBUSServerMgr()
00009500 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::~CPhMODBUSServerMgr()
00009560 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::CPhMODBUSServerMgr()
00009644 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::CPhMODBUSServerMgr()
00009728 PhMODBUS_82xx_68.elf CPhMODBUS::GetStatus(trHWFAddress, teHWFUnitKind, teHWFStatusType*, teHWFExtStatusType*, teHWFErrorCode*)
00009770 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::KickWatchdog(unsigned short*, teHWFErrorCode*)
0000977c PhMODBUS_82xx_68.elf CPhMODBUS::KickWatchdog(unsigned short*, teHWFErrorCode*)
000098c0 PhMODBUS_82xx_68.elf CModbusMessage::WriteCRC16()
00009958 PhMODBUS_82xx_68.elf CModbusMessage::CheckCRC16()
00009a54 PhMODBUS_82xx_68.elf CModbusMessage::IsValid()
00009a74 PhMODBUS_82xx_68.elf CModbusMessage::IsResponseAddressValid()
00009a98 PhMODBUS_82xx_68.elf CModbusMessage::ResetModbusMessage()
00009b50 PhMODBUS_82xx_68.elf CPhMODBUS::PrintDriverData(int, unsigned char*)
00009d00 PhMODBUS_82xx_68.elf CPhMODBUS::EmptyVarDataForConnection(unsigned long, int)
0000a06c PhMODBUS_82xx_68.elf CPhMODBUS::EmptyVardataQueue()
0000a364 PhMODBUS_82xx_68.elf CPhMODBUS::GetStartAddress(unsigned long, int*)
0000a540 PhMODBUS_82xx_68.elf CPhMODBUS::ModbusSendTelegram(int*, CModbusMessage*)
0000a760 PhMODBUS_82xx_68.elf CPhMODBUS::ModbusReceiveTelegram(int*, CModbusMessage*)
0000acfc PhMODBUS_82xx_68.elf CPhMODBUS::GetMemoryType(unsigned long, int*)
0000af98 PhMODBUS_82xx_68.elf CPhMODBUS::UnpackTelegram(unsigned long, unsigned long, bool, int*, CModbusMessage*)
0000b6f4 PhMODBUS_82xx_68.elf CPhMODBUS::ModbusBuildTelegram(unsigned long, unsigned long, int*, CModbusMessage*)
0000c0fc PhMODBUS_82xx_68.elf CPhMODBUS::ModbusBuildPollTelegram(unsigned long, int*, CModbusMessage*)
0000c360 PhMODBUS_82xx_68.elf CPhMODBUS::ProcessVarData(unsigned long, unsigned long, bool, int*, CModbusMessage*)
0000ca24 PhMODBUS_82xx_68.elf CPhMODBUS::ProcessConnections(CModbusMessage*)
0000ce70 PhMODBUS_82xx_68.elf CPhMODBUS::PollAllConnections(CModbusMessage*)
0000d27c PhMODBUS_82xx_68.elf CPhMODBUS::SlaveThreadWork()
0000d5d8 PhMODBUS_82xx_68.elf CPhMODBUS::MasterThreadWork()
0000da70 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::SendPingMsgToThreads()
0000db44 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::CheckForReplyMsgFromThreads()
0000dd0c PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::operator new(unsigned int, IHeapCallback*)
0000de00 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::SetCallBackInterfacePointers(IVOSCallback2*, cTracelog*)
0000de14 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::IncrementExpirationTime(unsigned long)
0000de54 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::GetSupervisorMsgQHandle()
0000de64 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::IsTaskRunning()
0000de78 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::CreateSupervisorMsgQ()
0000df48 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::CheckForTimeOuts()
0000e048 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::CopyRegisteredTaskInfo(tThreadRegInfo)
0000e10c PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::UnRegisterThread(unsigned long)
0000e1c4 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::~CPhMODBUSThreadSupervisor()
0000e208 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::~CPhMODBUSThreadSupervisor()
0000e24c PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::CPhMODBUSThreadSupervisor()
0000e290 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::CPhMODBUSThreadSupervisor()
0000e2d8 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::SupervisorTaskMain()
0000e3fc PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::RegisterThread(tThreadRegInfo)
0000e5a8 PhMODBUS_82xx_68.elf cTracelog::Init(ISystemUtilitiesCallback4*)
0000e5b8 PhMODBUS_82xx_68.elf cTracelog::cTracelog()
0000e5f0 PhMODBUS_82xx_68.elf cTracelog::cTracelog()
0000e628 PhMODBUS_82xx_68.elf cTracelog::~cTracelog()
0000e634 PhMODBUS_82xx_68.elf cTracelog::~cTracelog()
0000e640 PhMODBUS_82xx_68.elf cTracelog::Get_Trace_Level()
0000e694 PhMODBUS_82xx_68.elf cTracelog::ENABLE_MODBUSDEBUG_BOOL()
0000e6e8 PhMODBUS_82xx_68.elf cTracelog::AssignAllSlaveDown(bool)
0000e73c PhMODBUS_82xx_68.elf cTracelog::AssignIsSlaveAlive(float)
0000e78c PhMODBUS_82xx_68.elf cTracelog::EnableDriverDataDebug()
0000e7e4 PhMODBUS_82xx_68.elf cTracelog::Trace(int, char const*)
0000e8cc PhMODBUS_82xx_68.elf cTracelog::PrepareMessage(char*, char const*, char const*, unsigned int)
0000ea18 PhMODBUS_82xx_68.elf cTracelog::WriteInfo(char const*, char const*, unsigned int)
0000eaf4 PhMODBUS_82xx_68.elf cTracelog::WriteError(char const*, char const*, unsigned int)
0000ebd0 PhMODBUS_82xx_68.elf ObjectFactory
0000ecf8 PhMODBUS_82xx_68.elf operator delete(void*)
0000ed38 PhMODBUS_82xx_68.elf __cxa_pure_virtual
0000ed74 PhMODBUS_82xx_68.elf CPhCommon_Base::CPhCommon_Base()
0000edd8 PhMODBUS_82xx_68.elf CPhCommon_Base::CPhCommon_Base()
0000ee38 PhMODBUS_82xx_68.elf CPhCommon_Base::GetProductInfo(unsigned char*, unsigned char*, unsigned char*, unsigned long)
0000ee74 PhMODBUS_82xx_68.elf CPhCommon_Base::SetCommonCallbackInterface(ICommonCallback*)
0000eea4 PhMODBUS_82xx_68.elf CPhConfig_Base1::PrepareForTermination(teHWFErrorCode*)
0000eed4 PhMODBUS_82xx_68.elf CPhConfig_Base1::RemoveHWConfiguration(trHWFAddress, teHWFErrorCode*)
0000ef04 PhMODBUS_82xx_68.elf CPhConfig_Base1::RemoveIoConnection(unsigned long, teHWFErrorCode*)
0000ef38 PhMODBUS_82xx_68.elf CPhConfig_Base1::PhResponsibilityForRestart(trHWFAddress, teHWFErrorCode*)
0000ef68 PhMODBUS_82xx_68.elf CPhConfig_Base1::PhResponsibility(trHWFAddress, teHWFErrorCode*)
0000ef98 PhMODBUS_82xx_68.elf CPhConfig_Base1::StartUsingIoConnection(trHWFAddress, unsigned long, teHWFErrorCode*)
0000efcc PhMODBUS_82xx_68.elf CPhConfig_Base1::PhResponsibilityForBackupDevice(trHWFAddress, teHWFErrorCode*)
0000effc PhMODBUS_82xx_68.elf CPhConfig_Base1::PhResponsibilityForHotInsert(trHWFAddress, teHWFErrorCode*)
0000f02c PhMODBUS_82xx_68.elf CPhConfig_Base1::PerformSwitchover(trHWFAddress, teHWFErrorCode*)
0000f05c PhMODBUS_82xx_68.elf CPhConfig_Base1::StartUsingDevice(trHWFAddress, teHWFErrorCode*)
0000f08c PhMODBUS_82xx_68.elf CPhConfig_Base1::PerformFailover(trHWFAddress, teHWFErrorCode*)
0000f0bc PhMODBUS_82xx_68.elf CPhClient_Base::ConnectReq(unsigned long, unsigned long*, int*)
0000f0f4 PhMODBUS_82xx_68.elf CPhClient_Base::DisconnectReq(unsigned long, unsigned long, int*)
0000f12c PhMODBUS_82xx_68.elf CPhClient_Base::ReadVarReq(unsigned long, int*)
0000f160 PhMODBUS_82xx_68.elf CPhClient_Base::WriteVarReq(unsigned long, int*)
0000f194 PhMODBUS_82xx_68.elf CPhClient_Base::ReadRawReq(unsigned long, int*)
0000f1c8 PhMODBUS_82xx_68.elf CPhClient_Base::WriteRawReq(unsigned long, int*)
0000f1fc PhMODBUS_82xx_68.elf CPhClient_Base::AbortRawReq(unsigned long, int*)
0000f230 PhMODBUS_82xx_68.elf CPhClient_Base::AbortVarReq(unsigned long, int*)
0000f264 PhMODBUS_82xx_68.elf CPhClient_Base::GetExtendedStatusSize(unsigned long, int*, int*)
0000f29c PhMODBUS_82xx_68.elf CPhClient_Base::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
0000f2dc PhMODBUS_82xx_68.elf CPhClient_Base::SetStatus(unsigned long, int, int*)
0000f314 PhMODBUS_82xx_68.elf CPhClient_Base::ReadRes(unsigned long, int, int*)
0000f34c PhMODBUS_82xx_68.elf CPhClient_Base::WriteRes(unsigned long, int, int*)
0000f384 PhMODBUS_82xx_68.elf CPhClient_Base1::ConnectReq(unsigned long, unsigned long*, int*)
0000f3bc PhMODBUS_82xx_68.elf CPhClient_Base1::DisconnectReq(unsigned long, unsigned long, int*)
0000f3f4 PhMODBUS_82xx_68.elf CPhClient_Base1::ReadVarReq(unsigned long, int*)
0000f428 PhMODBUS_82xx_68.elf CPhClient_Base1::WriteVarReq(unsigned long, int*)
0000f45c PhMODBUS_82xx_68.elf CPhClient_Base1::RegisterVarReq(unsigned long, int*)
0000f490 PhMODBUS_82xx_68.elf CPhClient_Base1::ReadRawReq(unsigned long, int*)
0000f4c4 PhMODBUS_82xx_68.elf CPhClient_Base1::WriteRawReq(unsigned long, int*)
0000f4f8 PhMODBUS_82xx_68.elf CPhClient_Base1::AbortRawReq(unsigned long, int*)
0000f52c PhMODBUS_82xx_68.elf CPhClient_Base1::AbortVarReq(unsigned long, int*)
0000f560 PhMODBUS_82xx_68.elf CPhClient_Base1::TimeoutAbortVarReq(unsigned long, int*)
0000f5c4 PhMODBUS_82xx_68.elf CPhClient_Base1::GetExtendedStatusSize(unsigned long, int*, int*)
0000f5fc PhMODBUS_82xx_68.elf CPhClient_Base1::GetExtendedStatus(unsigned long, int, teIEC1131Type*, tGCValue*, int*)
0000f63c PhMODBUS_82xx_68.elf CPhClient_Base1::BufferTakeForReceive(unsigned long, int*)
0000f670 PhMODBUS_82xx_68.elf CPhClient_Base1::BufferGiveForReceive(unsigned long, int, int*)
0000f6a8 PhMODBUS_82xx_68.elf CPhClient_Base1::BufferTakeForSend(unsigned long, unsigned int, int*)
0000f6e0 PhMODBUS_82xx_68.elf CPhClient_Base1::BufferGiveForSend(unsigned long, unsigned int, int, int*)
0000f71c PhMODBUS_82xx_68.elf CPhClient_Base1::SetStatus(unsigned long, int, int*)
0000f754 PhMODBUS_82xx_68.elf CPhClient_Base1::ReadRes(unsigned long, int, int*)
0000f78c PhMODBUS_82xx_68.elf CPhClient_Base1::WriteRes(unsigned long, int, int*)
0000f7c4 PhMODBUS_82xx_68.elf CPhStatus_Base1::KickWatchdog(unsigned short*, teHWFErrorCode*)
0000f7f8 PhMODBUS_82xx_68.elf CPhStatus_Base1::GetStatus(trHWFAddress, teHWFUnitKind, unsigned long*, unsigned long*, teHWFErrorCode*)
0000f834 PhMODBUS_82xx_68.elf CPhIOAccess_Base::GetCopyRoutineReference(unsigned int, void (**)(short, void*, void*), IOAccessErrorCode*)
0000f86c PhMODBUS_82xx_68.elf CPhIOAccess_Base::ObtainDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
0000f8a0 PhMODBUS_82xx_68.elf CPhIOAccess_Base::ReleaseDPM(eAreaType, trHWFAddress, IOAccessErrorCode*)
0000f8d4 PhMODBUS_82xx_68.elf CPhDiagnostics_Base::PhDiagnosticsTableNew(teDiagErrorCode*)
0000f904 PhMODBUS_82xx_68.elf CPhDiagnostics_Base::PhDiagnosticsTableCleared(teDiagErrorCode*)
0000f934 PhMODBUS_82xx_68.elf CPhOLU_Base::PrepareForFirmwareDownload(trHWFAddress const*, unsigned long, eOLUStatus*)
0000f96c PhMODBUS_82xx_68.elf CPhOLU_Base::PrepareForApplicationStop(trHWFAddress const*, eOLUStatus*)
0000f9a0 PhMODBUS_82xx_68.elf CPhOLU_Base::ResumeOperation(trHWFAddress const*, eOLUStatus*)
0000f9d4 PhMODBUS_82xx_68.elf CPhOLU_Base::PhResponsibilityForOLU(trHWFAddress const*, eOLUStatus*)
0000fa08 PhMODBUS_82xx_68.elf CPhOLU_Base::PrepareForLeavingOLU(trHWFAddress const*, eOLUStatus*)
0000fa3c PhMODBUS_82xx_68.elf CPhOLU_Base::PrepareForAppAndConfigDownload(trHWFAddress const*, eOLUStatus*)
0000fa70 PhMODBUS_82xx_68.elf CPhOLU_Base1::PrepareForFirmwareDownload(trHWFAddress const*, unsigned long, eOLUStatus*)
0000faa8 PhMODBUS_82xx_68.elf CPhOLU_Base1::PrepareForApplicationStop(trHWFAddress const*, eOLUStatus*)
0000fadc PhMODBUS_82xx_68.elf CPhOLU_Base1::ResumeOperation(trHWFAddress const*, eOLUStatus*)
0000fb10 PhMODBUS_82xx_68.elf CPhOLU_Base1::PhResponsibilityForOLU(trHWFAddress const*, eOLUStatus*)
0000fb44 PhMODBUS_82xx_68.elf CPhOLU_Base1::PrepareForLeavingOLU(trHWFAddress const*, eOLUStatus*)
0000fb78 PhMODBUS_82xx_68.elf CPhOLU_Base1::PrepareForAppAndConfigDownload(trHWFAddress const*, eOLUStatus*)
0000fbac PhMODBUS_82xx_68.elf CPhOLU_Base1::OLUEnablePhCom(trHWFAddress const*, eOLUStatus*)
0000fbe0 PhMODBUS_82xx_68.elf CPhOLU_Base1::OLUDisablePhCom(trHWFAddress const*, eOLUStatus*)
0000fc14 PhMODBUS_82xx_68.elf CPhOLU_Base1::InformPhIsInSwitch(trHWFAddress const*, eOLUStatus*)
0000fc4c PhMODBUS_82xx_68.elf CPhCommon_Base::~CPhCommon_Base()
0000fcc8 PhMODBUS_82xx_68.elf CPhCommon_Base::~CPhCommon_Base()
0000fd44 PhMODBUS_82xx_68.elf CPhCommon_Base::~CPhCommon_Base()
0000fdbc PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::AddRef()
0000fdc4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::AddRef()
0000fdcc PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::AddRef()
0000fdd4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::AddRef()
0000fddc PhMODBUS_82xx_68.elf CPhMODBUS::AddRef()
0000fdfc PhMODBUS_82xx_68.elf IUnknown::~IUnknown()
0000fe40 PhMODBUS_82xx_68.elf IUnknown::~IUnknown()
0000fe80 PhMODBUS_82xx_68.elf IPhConfig1::~IPhConfig1()
0000fec8 PhMODBUS_82xx_68.elf IPhStatus1::~IPhStatus1()
0000ff14 PhMODBUS_82xx_68.elf IPhStatus1::~IPhStatus1()
0000ff5c PhMODBUS_82xx_68.elf IPhConfig1::~IPhConfig1()
0000ffa4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::QueryInterface(_GUID const&, void**)
0000ffac PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::QueryInterface(_GUID const&, void**)
0000ffb4 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::QueryInterface(_GUID const&, void**)
0000ffbc PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::QueryInterface(_GUID const&, void**)
0000ffc8 PhMODBUS_82xx_68.elf CPhMODBUS::QueryInterface(_GUID const&, void**)
000100f8 PhMODBUS_82xx_68.elf IPhClient1::~IPhClient1()
00010144 PhMODBUS_82xx_68.elf IPhClient1::~IPhClient1()
00010188 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::Release()
00010190 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::Release()
00010198 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::Release()
000101a0 PhMODBUS_82xx_68.elf non-virtual thunk to CPhMODBUS::Release()
000101a8 PhMODBUS_82xx_68.elf CPhMODBUS::Release()
00010218 PhMODBUS_82xx_68.elf IPhClient::~IPhClient()
00010264 PhMODBUS_82xx_68.elf IPhClient::~IPhClient()
000102ac PhMODBUS_82xx_68.elf IUnknown::IUnknown()
00010304 PhMODBUS_82xx_68.elf IPhCommon::IPhCommon()
00010368 PhMODBUS_82xx_68.elf IUnknown::~IUnknown()
000103d8 PhMODBUS_82xx_68.elf IPhConfig1::~IPhConfig1()
00010454 PhMODBUS_82xx_68.elf CPhConfig_Base1::~CPhConfig_Base1()
000104d0 PhMODBUS_82xx_68.elf CPhConfig_Base1::~CPhConfig_Base1()
0001054c PhMODBUS_82xx_68.elf IPhClient::~IPhClient()
000105c8 PhMODBUS_82xx_68.elf CPhClient_Base::~CPhClient_Base()
00010644 PhMODBUS_82xx_68.elf CPhClient_Base::~CPhClient_Base()
000106c0 PhMODBUS_82xx_68.elf IPhClient1::~IPhClient1()
0001073c PhMODBUS_82xx_68.elf CPhClient_Base1::~CPhClient_Base1()
000107b8 PhMODBUS_82xx_68.elf CPhClient_Base1::~CPhClient_Base1()
00010834 PhMODBUS_82xx_68.elf IPhStatus1::~IPhStatus1()
000108b0 PhMODBUS_82xx_68.elf CPhStatus_Base1::~CPhStatus_Base1()
0001092c PhMODBUS_82xx_68.elf CPhStatus_Base1::~CPhStatus_Base1()
000109a8 PhMODBUS_82xx_68.elf IPhIOAccess::~IPhIOAccess()
00010a24 PhMODBUS_82xx_68.elf CPhIOAccess_Base::~CPhIOAccess_Base()
00010aa0 PhMODBUS_82xx_68.elf IPhIOAccess::~IPhIOAccess()
00010b1c PhMODBUS_82xx_68.elf IPhIOAccess::~IPhIOAccess()
00010b98 PhMODBUS_82xx_68.elf CPhIOAccess_Base::~CPhIOAccess_Base()
00010c14 PhMODBUS_82xx_68.elf IPhDiagnostics::~IPhDiagnostics()
00010c90 PhMODBUS_82xx_68.elf CPhDiagnostics_Base::~CPhDiagnostics_Base()
00010d0c PhMODBUS_82xx_68.elf IPhDiagnostics::~IPhDiagnostics()
00010d88 PhMODBUS_82xx_68.elf IPhDiagnostics::~IPhDiagnostics()
00010e04 PhMODBUS_82xx_68.elf CPhDiagnostics_Base::~CPhDiagnostics_Base()
00010e80 PhMODBUS_82xx_68.elf IPhOLU::~IPhOLU()
00010efc PhMODBUS_82xx_68.elf CPhOLU_Base::~CPhOLU_Base()
00010f78 PhMODBUS_82xx_68.elf IPhOLU::~IPhOLU()
00010ff4 PhMODBUS_82xx_68.elf IPhOLU::~IPhOLU()
00011070 PhMODBUS_82xx_68.elf CPhOLU_Base::~CPhOLU_Base()
000110ec PhMODBUS_82xx_68.elf IPhOLU1::~IPhOLU1()
00011168 PhMODBUS_82xx_68.elf CPhOLU_Base1::~CPhOLU_Base1()
000111e4 PhMODBUS_82xx_68.elf IPhOLU1::~IPhOLU1()
00011260 PhMODBUS_82xx_68.elf IPhOLU1::~IPhOLU1()
000112dc PhMODBUS_82xx_68.elf CPhOLU_Base1::~CPhOLU_Base1()
00011358 PhMODBUS_82xx_68.elf IPhCommon::~IPhCommon()
000113d4 PhMODBUS_82xx_68.elf IPhCommon::~IPhCommon()
00011450 PhMODBUS_82xx_68.elf IPhCommon::~IPhCommon()
000114c8 PhMODBUS_82xx_68.elf CompanyName
000114cc PhMODBUS_82xx_68.elf ProductName
000114d8 PhMODBUS_82xx_68.elf ProductVersion
000114f4 PhMODBUS_82xx_68.elf CRCHiTable
000115f4 PhMODBUS_82xx_68.elf CRCLoTable
000118a4 PhMODBUS_82xx_68.elf CRCHiTable
000119a4 PhMODBUS_82xx_68.elf CRCLoTable
00011aa4 PhMODBUS_82xx_68.elf CLSID_CPhMODBUS
00011b0c PhMODBUS_82xx_68.elf IID_IPhCommonCB
00011b1c PhMODBUS_82xx_68.elf IID_IPhConfigCB
00011b2c PhMODBUS_82xx_68.elf IID_IPhConfigCB1
00011b3c PhMODBUS_82xx_68.elf IID_IPhIOAccessCB
00011b4c PhMODBUS_82xx_68.elf IID_IPhExternalConfigCB1
00011b5c PhMODBUS_82xx_68.elf IID_IPhExternalConfigCB2
00011b6c PhMODBUS_82xx_68.elf IID_IPhExternalConfigCB3
00011b7c PhMODBUS_82xx_68.elf IID_IPhOLUCB
00011b8c PhMODBUS_82xx_68.elf IID_IPhCommon
00011b9c PhMODBUS_82xx_68.elf IID_IPhConfig1
00011bac PhMODBUS_82xx_68.elf IID_IPhStatus1
00011bbc PhMODBUS_82xx_68.elf IID_IPhClient
00011bcc PhMODBUS_82xx_68.elf IID_IPhClient1
00011bdc PhMODBUS_82xx_68.elf IID_IPhDiagnostics
00011bec PhMODBUS_82xx_68.elf IID_IPhIOAccess
00011bfc PhMODBUS_82xx_68.elf IID_IPhSafeConfig
00011c0c PhMODBUS_82xx_68.elf IID_IPhSafeConfig1
00011c1c PhMODBUS_82xx_68.elf IID_IPhSafeConfig2
00011c2c PhMODBUS_82xx_68.elf IID_IPhSimulation
00011c3c PhMODBUS_82xx_68.elf IID_IPhOLU
00011c4c PhMODBUS_82xx_68.elf IID_IPhOLU1
00011c5c PhMODBUS_82xx_68.elf IID_IHeapCallback
00011c6c PhMODBUS_82xx_68.elf IID_ISystemUtilitiesCallback
00011c7c PhMODBUS_82xx_68.elf IID_ISystemUtilitiesCallback1
00011c8c PhMODBUS_82xx_68.elf IID_ISystemUtilitiesCallback2
00011c9c PhMODBUS_82xx_68.elf IID_ISystemUtilitiesCallback3
00011cac PhMODBUS_82xx_68.elf IID_ISystemUtilitiesCallback4
00011cbc PhMODBUS_82xx_68.elf IID_IEventMgrCallback
00011ccc PhMODBUS_82xx_68.elf IID_IEventMgrCallback1
00011cdc PhMODBUS_82xx_68.elf IID_ISysClockCallback
00011cec PhMODBUS_82xx_68.elf IID_ISysClockCallback1
00011cfc PhMODBUS_82xx_68.elf IID_ISysClockCallback2
00011d0c PhMODBUS_82xx_68.elf IID_ISysClockCallback3
00011d1c PhMODBUS_82xx_68.elf IID_INetwClockSynchCallback
00011d2c PhMODBUS_82xx_68.elf IID_IConfigCBCallback1
00011d3c PhMODBUS_82xx_68.elf IID_IConfigCBCallback2
00011d4c PhMODBUS_82xx_68.elf IID_IConfigCBCallback3
00011d5c PhMODBUS_82xx_68.elf IID_IExternalConfigCBCallback
00011d6c PhMODBUS_82xx_68.elf IID_IExternalConfigCBCallback2
00011d7c PhMODBUS_82xx_68.elf IID_IExternalConfigCBCallback3
00011d8c PhMODBUS_82xx_68.elf IID_IExternalConfigCBCallback4
00011d9c PhMODBUS_82xx_68.elf IID_IMessagesCBCallback
00011dac PhMODBUS_82xx_68.elf IID_IAIPAccessCBCallback
00011dbc PhMODBUS_82xx_68.elf IID_IOLUCBCallback
00011dcc PhMODBUS_82xx_68.elf IID_IOLUCBCallback1
00011ddc PhMODBUS_82xx_68.elf IID_ISystemUtilitiesCBCallback1
00011dec PhMODBUS_82xx_68.elf IID_IConfigCallback1
00011dfc PhMODBUS_82xx_68.elf IID_IConfigCallback2
00011e0c PhMODBUS_82xx_68.elf IID_IStatusCallback1
00011e1c PhMODBUS_82xx_68.elf IID_IGenClientCallback
00011e2c PhMODBUS_82xx_68.elf IID_IGenClientCallback1
00011e3c PhMODBUS_82xx_68.elf IID_IGenClientCallback2
00011e4c PhMODBUS_82xx_68.elf IID_IIACClientCallback
00011e5c PhMODBUS_82xx_68.elf IID_IDriverFactoryCallback
00011e6c PhMODBUS_82xx_68.elf IID_IDiagnosticsCallback
00011e7c PhMODBUS_82xx_68.elf IID_ISafeConfigCallback
00011e8c PhMODBUS_82xx_68.elf IID_ISafeConfigCallback1
00011e9c PhMODBUS_82xx_68.elf IID_ISafeConfigCallback2
00011eac PhMODBUS_82xx_68.elf IID_ICRCCallback
00011ebc PhMODBUS_82xx_68.elf IID_IIOAccessCallback
00011ecc PhMODBUS_82xx_68.elf IID_CriticalRegionCallback
00011edc PhMODBUS_82xx_68.elf IID_VOSExceptionCallback
00011eec PhMODBUS_82xx_68.elf IID_DrvCommonCallback
00011efc PhMODBUS_82xx_68.elf IID_ProtectedMirroredHeapCallback
00011f0c PhMODBUS_82xx_68.elf IID_SharedMirroredHeapCallback
00011f1c PhMODBUS_82xx_68.elf IID_TemporaryMirroredHeapCallback
00011f2c PhMODBUS_82xx_68.elf IID_IRestrictedVOSCallback
00011f3c PhMODBUS_82xx_68.elf IID_IVarServerCallback
00011f4c PhMODBUS_82xx_68.elf IID_IVarServerCallback1
00011f5c PhMODBUS_82xx_68.elf IID_IVarServerCallback2
00011f6c PhMODBUS_82xx_68.elf IID_ISOCKETCallback
00011f7c PhMODBUS_82xx_68.elf IID_ISOCKETCallback1
00011f8c PhMODBUS_82xx_68.elf IID_IVOSCallback2
00018c70 V vtable for CModbusMessage PhMODBUS_82xx_68.elf 
00018c80 V vtable for CPhMODBUS PhMODBUS_82xx_68.elf 
00018e30 V vtable for IPhClient1 PhMODBUS_82xx_68.elf 
00018e98 V vtable for IUnknown PhMODBUS_82xx_68.elf 
00018eb8 V vtable for IPhClient PhMODBUS_82xx_68.elf 
00018f08 V vtable for IPhStatus1 PhMODBUS_82xx_68.elf 
00018f30 V vtable for IPhConfig1 PhMODBUS_82xx_68.elf 
00018f78 V vtable for CPhMODBUSServerMgr PhMODBUS_82xx_68.elf 
00018f88 V vtable for CPhOLU_Base1 PhMODBUS_82xx_68.elf 
00018fc8 V vtable for CPhOLU_Base PhMODBUS_82xx_68.elf 
00019000 V vtable for CPhDiagnostics_Base PhMODBUS_82xx_68.elf 
00019028 V vtable for CPhIOAccess_Base PhMODBUS_82xx_68.elf 
00019050 V vtable for CPhStatus_Base1 PhMODBUS_82xx_68.elf 
00019078 V vtable for CPhClient_Base1 PhMODBUS_82xx_68.elf 
000190e0 V vtable for CPhClient_Base PhMODBUS_82xx_68.elf 
00019130 V vtable for CPhConfig_Base1 PhMODBUS_82xx_68.elf 
00019178 V vtable for CPhCommon_Base PhMODBUS_82xx_68.elf 
000191a0 V vtable for IPhIOAccess PhMODBUS_82xx_68.elf 
000191c8 V vtable for IPhDiagnostics PhMODBUS_82xx_68.elf 
000191f0 V vtable for IPhOLU PhMODBUS_82xx_68.elf 
00019228 V vtable for IPhOLU1 PhMODBUS_82xx_68.elf 
00019268 V vtable for IPhCommon PhMODBUS_82xx_68.elf 
0001928c PhMODBUS_82xx_68.elf CRTFuncTabBegin
0001928c PhMODBUS_82xx_68.elf scprocs
00019298 PhMODBUS_82xx_68.elf printf
0001929c PhMODBUS_82xx_68.elf sprintf
000192a0 PhMODBUS_82xx_68.elf sscanf
000192a4 PhMODBUS_82xx_68.elf memcpy
000192a8 PhMODBUS_82xx_68.elf memset
000192ac PhMODBUS_82xx_68.elf strcat
000192b0 PhMODBUS_82xx_68.elf strcmp
000192b4 PhMODBUS_82xx_68.elf strlen
000192b8 PhMODBUS_82xx_68.elf strncmp
000192bc PhMODBUS_82xx_68.elf strncpy
000192c0 PhMODBUS_82xx_68.elf memchr
000192c4 PhMODBUS_82xx_68.elf memcmp
000192c8 PhMODBUS_82xx_68.elf memmove
000192cc PhMODBUS_82xx_68.elf strchr
000192d0 PhMODBUS_82xx_68.elf strcoll
000192d4 PhMODBUS_82xx_68.elf strcpy
000192d8 PhMODBUS_82xx_68.elf strcspn
000192dc PhMODBUS_82xx_68.elf strncat
000192e0 PhMODBUS_82xx_68.elf strpbrk
000192e4 PhMODBUS_82xx_68.elf strrchr
000192e8 PhMODBUS_82xx_68.elf strspn
000192ec PhMODBUS_82xx_68.elf strstr
000192f0 PhMODBUS_82xx_68.elf strtok
000192f4 PhMODBUS_82xx_68.elf strxfrm
000192f8 PhMODBUS_82xx_68.elf strerror
000192fc PhMODBUS_82xx_68.elf pow
00019300 PhMODBUS_82xx_68.elf acos
00019304 PhMODBUS_82xx_68.elf asin
00019308 PhMODBUS_82xx_68.elf atan
0001930c PhMODBUS_82xx_68.elf atan2
00019310 PhMODBUS_82xx_68.elf ceil
00019314 PhMODBUS_82xx_68.elf cos
00019318 PhMODBUS_82xx_68.elf cosh
0001931c PhMODBUS_82xx_68.elf exp
00019320 PhMODBUS_82xx_68.elf fabs
00019324 PhMODBUS_82xx_68.elf floor
00019328 PhMODBUS_82xx_68.elf fmod
0001932c PhMODBUS_82xx_68.elf frexp
00019330 PhMODBUS_82xx_68.elf ldexp
00019334 PhMODBUS_82xx_68.elf log
00019338 PhMODBUS_82xx_68.elf log10
0001933c PhMODBUS_82xx_68.elf modf
00019340 PhMODBUS_82xx_68.elf sin
00019344 PhMODBUS_82xx_68.elf sinh
00019348 PhMODBUS_82xx_68.elf sqrt
0001934c PhMODBUS_82xx_68.elf tan
00019350 PhMODBUS_82xx_68.elf tanh
00019354 PhMODBUS_82xx_68.elf div_r
00019358 PhMODBUS_82xx_68.elf labs
0001935c PhMODBUS_82xx_68.elf strtol
00019360 PhMODBUS_82xx_68.elf free
00019364 PhMODBUS_82xx_68.elf abort
00019368 PhMODBUS_82xx_68.elf abs
0001936c PhMODBUS_82xx_68.elf atof
00019370 PhMODBUS_82xx_68.elf atoi
00019374 PhMODBUS_82xx_68.elf atol
00019378 PhMODBUS_82xx_68.elf bsearch
0001937c PhMODBUS_82xx_68.elf ldiv_r
00019380 PhMODBUS_82xx_68.elf qsort
00019384 PhMODBUS_82xx_68.elf rand
00019388 PhMODBUS_82xx_68.elf srand
0001938c PhMODBUS_82xx_68.elf strtod
00019390 PhMODBUS_82xx_68.elf strtoul
00019394 PhMODBUS_82xx_68.elf malloc
00019398 PhMODBUS_82xx_68.elf __assert
0001939c PhMODBUS_82xx_68.elf time
000193a0 PhMODBUS_82xx_68.elf asctime
000193a4 PhMODBUS_82xx_68.elf gmtime
000193a8 PhMODBUS_82xx_68.elf clock
000193ac PhMODBUS_82xx_68.elf ctime
000193b0 PhMODBUS_82xx_68.elf difftime
000193b4 PhMODBUS_82xx_68.elf localtime
000193b8 PhMODBUS_82xx_68.elf mktime
000193bc PhMODBUS_82xx_68.elf strftime
000193c0 PhMODBUS_82xx_68.elf eventcollSem
000193c4 PhMODBUS_82xx_68.elf intLock
000193c8 PhMODBUS_82xx_68.elf intUnlock
000193d4 PhMODBUS_82xx_68.elf fprintf
000193d8 PhMODBUS_82xx_68.elf __stdout
000193dc PhMODBUS_82xx_68.elf __stderr
000193e0 PhMODBUS_82xx_68.elf setjmp
000193e4 PhMODBUS_82xx_68.elf longjmp
000193e8 PhMODBUS_82xx_68.elf operator new[](unsigned int)
000193ec PhMODBUS_82xx_68.elf operator delete[](void*)
000193f0 PhMODBUS_82xx_68.elf CRTFuncTabEnd
000193f0 PhMODBUS_82xx_68.elf ecprocs
000193f0 PhMODBUS_82xx_68.elf etext
000193f0 PhMODBUS_82xx_68.elf sgot2
00019c38 PhMODBUS_82xx_68.elf egot2
00019c38 PhMODBUS_82xx_68.elf sfixup
0001a344 PhMODBUS_82xx_68.elf CPhMODBUS::m_ModbusLLTag
0001a344 PhMODBUS_82xx_68.elf efixup
0001a348 PhMODBUS_82xx_68.elf m_SemHandleSerialDrvCalls
0001a34c PhMODBUS_82xx_68.elf CModbusMessage::m_TagModbus
0001a350 PhMODBUS_82xx_68.elf m_ModbusLLTag
0001a354 PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::m_TagModbusServer
0001a358 PhMODBUS_82xx_68.elf CPhMODBUSThreadSupervisor::m_TagModbusSupervisor
0001a35c PhMODBUS_82xx_68.elf CMirroredObject::c_pMirroredObjectMgrImpl
0001a360 PhMODBUS_82xx_68.elf CMirroredObjectAgent::c_pHeapCallback
0001a364 PhMODBUS_82xx_68.elf CMirroredObjectAgent::c_AgentTag
0001a368 V CComCoClass<CPhMODBUS, &(CLSID_CPhMODBUS)>::m_HeapTag PhMODBUS_82xx_68.elf 
0001a36c PhMODBUS_82xx_68.elf CPhMODBUSServerMgr::HandleIncomingMBClientRequest()::flag
0001a370 PhMODBUS_82xx_68.elf PHproperties
0001a378 PhMODBUS_82xx_68.elf cMBThreadName
0001a384 PhMODBUS_82xx_68.elf cMBSupportedFunctionCode
0001a3c8 PhMODBUS_82xx_68.elf cServerErrorString
0001a3ec PhMODBUS_82xx_68.elf cStreamProcessingErrorString
0001a3fc PhMODBUS_82xx_68.elf cExceptionCodeString
0001a418 PhMODBUS_82xx_68.elf useEXEHEAD
</SYMBOLS>
