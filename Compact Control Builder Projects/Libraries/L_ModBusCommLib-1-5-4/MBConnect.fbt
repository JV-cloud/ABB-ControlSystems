<?xml version="1.0" encoding="UTF-16"?><FunctionBlockType xmlns="CBSourceCodeSchema3_0" Name="MBConnect" Protected="1" Hidden="0" Scope="public" Guid="78058cdf-d49f-4efe-a85c-bc75ba2b2bc4" InternalChangeTime="2015-08-19-09:03:21.827" BuildVersion="6.0.300.21" SaveDate="2019-09-18-05:56:53.031" CodePage="1252" InteractionWindow="" AlarmOwner="0" InstantiateAsAspectObject="0" SILLevel="NonSIL" RestrictedSIL="0" SimulationMark="0" EmbeddedGraphicsVisible="0"><Parameters><Parameter Name="En_C" Type="bool" TypeGuid="fcc571cc-3a50-4ec6-9241-0726a148299b" AccessLevel="Read Only" SafetyType="None" Attribute="retain" InitialValue="" ReadPermission="" WritePermission="Administrate" AuthenticationLevel="None" Direction="in" FDPort="yes"><Description>Enables the execution while True</Description></Parameter><Parameter Name="Channel" Type="string[40]" TypeGuid="49d3a1c9-a834-46c6-9f71-88a69e045a5d" AccessLevel="Read Only" SafetyType="None" Attribute="retain" InitialValue="" ReadPermission="" WritePermission="Administrate" AuthenticationLevel="None" Direction="in" FDPort="no"><Description>The local communication channel to be used for the connection</Description></Parameter><Parameter Name="Partner" Type="string[40]" TypeGuid="49d3a1c9-a834-46c6-9f71-88a69e045a5d" AccessLevel="Read Only" SafetyType="None" Attribute="retain" InitialValue="" ReadPermission="" WritePermission="Administrate" AuthenticationLevel="None" Direction="in" FDPort="no"><Description>The remote communication partner (Identity)</Description></Parameter><Parameter Name="Valid" Type="bool" TypeGuid="fcc571cc-3a50-4ec6-9241-0726a148299b" AccessLevel="Read Only" SafetyType="None" Attribute="" InitialValue="" ReadPermission="" WritePermission="Administrate" AuthenticationLevel="None" Direction="out" FDPort="no"><Description>True when the output values are valid</Description></Parameter><Parameter Name="Error" Type="bool" TypeGuid="fcc571cc-3a50-4ec6-9241-0726a148299b" AccessLevel="Read Only" SafetyType="None" Attribute="retain" InitialValue="" ReadPermission="" WritePermission="Administrate" AuthenticationLevel="None" Direction="out" FDPort="yes"><Description>Indicates an error with True. Status parameter &lt; 0</Description></Parameter><Parameter Name="Status" Type="dint" TypeGuid="d59be854-1395-4e4f-9cf6-6a4ba4ccdc98" AccessLevel="Read Only" SafetyType="None" Attribute="retain" InitialValue="1" ReadPermission="" WritePermission="Administrate" AuthenticationLevel="None" Direction="out" FDPort="no"><Description>Status code of last execution, operation successful 1, pending 0, errors &lt; 0, warnings &gt; 1</Description></Parameter><Parameter Name="Id" Type="Comm_Channel_MB" TypeGuid="ac112221-566e-44c1-9932-83c4db33e0e1" AccessLevel="Read Only" SafetyType="None" Attribute="" InitialValue="" ReadPermission="" WritePermission="" AuthenticationLevel="None" Direction="in_out" FDPort="yes right"><Description>OUT (IN) Communication channel, has to be connected to a FB of the type Read/Write</Description></Parameter></Parameters><ExtensibleParameters/><Variables><Variable Name="ConnectData" Type="MBConnectData" TypeGuid="472a5590-f240-417f-9a2e-bd9b0e1c6acd" AccessLevel="Read Only" SafetyType="None" Attribute="retain" InitialValue="" ReadPermission="" WritePermission="" AuthenticationLevel="None"><Description>Variable of structured type, used to assign specific in data for actual protocol</Description></Variable><Variable Name="AsyncStatus" Type="dint" TypeGuid="d59be854-1395-4e4f-9cf6-6a4ba4ccdc98" AccessLevel="Read Only" SafetyType="None" Attribute="" InitialValue="1" ReadPermission="" WritePermission="" AuthenticationLevel="None"><Description>Used to derive the result of asynchronous function calls</Description></Variable><Variable Name="cProtocol" Type="string[38]" TypeGuid="49d3a1c9-a834-46c6-9f71-88a69e045a5d" AccessLevel="Read Only" SafetyType="None" Attribute="constant" InitialValue="&apos;{82A1E389-7884-4918-BAE6-322ADBD5BB41}&apos;" ReadPermission="" WritePermission="" AuthenticationLevel="None"><Description>Modify this! Assign the "Initial value" with  actual GUID for the protocol</Description></Variable><Variable Name="DebugStatus" Type="dint" TypeGuid="d59be854-1395-4e4f-9cf6-6a4ba4ccdc98" AccessLevel="Read Only" SafetyType="None" Attribute="" InitialValue="1" ReadPermission="" WritePermission="" AuthenticationLevel="None"><Description>Used to derive the result of synchronous function calls</Description></Variable><Variable Name="PrgStep" Type="dint" TypeGuid="d59be854-1395-4e4f-9cf6-6a4ba4ccdc98" AccessLevel="Read Only" SafetyType="None" Attribute="" InitialValue="100" ReadPermission="" WritePermission="" AuthenticationLevel="None"><Description>Current step of the state machine</Description></Variable><Variable Name="ConnectionError" Type="bool" TypeGuid="fcc571cc-3a50-4ec6-9241-0726a148299b" AccessLevel="Read Only" SafetyType="None" Attribute="retain" InitialValue="" ReadPermission="" WritePermission="" AuthenticationLevel="None"><Description>Flag used to create a pulse on the Error parameter when an error occurs</Description></Variable><Variable Name="ChannelData" Type="string[40]" TypeGuid="49d3a1c9-a834-46c6-9f71-88a69e045a5d" AccessLevel="Read Only" SafetyType="None" Attribute="retain" InitialValue="" ReadPermission="" WritePermission="" AuthenticationLevel="None"><Description>Used to assign the data for connection</Description></Variable><Variable Name="ConcatData" Type="string[40]" TypeGuid="49d3a1c9-a834-46c6-9f71-88a69e045a5d" AccessLevel="Read Only" SafetyType="None" Attribute="retain" InitialValue="&apos;.0&apos;" ReadPermission="" WritePermission="" AuthenticationLevel="None"><Description>Defined to append the "Channel" value</Description></Variable></Variables><ExternalVariables/><FunctionBlocks/><ControlModules/><CodeBlocks><STCodeBlock Name="Code"><ST_Code>(# This function block is a template for construction of a connect
   function block supporting both address and  named- orientated protocol.

   All code with following appearance has to be considered/adapted:

   (# 
       Explanation . . . .    
    #)   


   The content is according to folowing:

   Step 100 - Initial Step of the sequence

   Step 200 - Call the "GCConnectionReq"- firmware function call

   Step 300 - Call the GCConnectionStatus firmware function call cyclically
              until the result is derived.

              OR

            - Disconnect when Enable- parameter is set to value False
              by call the "GCDisconnect" firmware function call.

   Step 400 - Wait for the result from the Asynchronous status is returned,
              i.e. the disconnection is concluded.            

   Step 500 - Same as 400 but don't show the result as valid or error.

   Step 900 - The error step

   Step 910 - Wait for the En_C set to value True before return to idle
              step 100 after a debug status has occured *)


   #)



(* ============   The Connect Function Block =========== *)



(* Reset the Out- parameters each scan to achieve a pulse *)
(*  #48285 wrote the closing parenthesis in above line  *)
Error := False;



(* Step 100 - The initial Step of the sequence *)

IF PrgStep = 100 AND En_C THEN

   Status := 0;
   PrgStep := 200;
   ConnectionError := False;
   		
END_IF; 




(* Step 200 - Call the "GCConnectionReq"- firmware function call *)

IF PrgStep = 200 THEN   

   (* Assignment of the ConnectData variable*)

   (# 
      The assignment of the ConnectData variable is implementer specified
      and has to be adapted for the actual protocol
    #)


   ConnectData.Partner := Partner;
   
   ChannelData := concat(Channel,ConcatData);

   GCConnectReq(ConnectRef := Id.Reference,
                Channel := ChannelData,
                Protocol := cProtocol,
                ConnectData := ConnectData,
                DebugStatus := DebugStatus);


   IF DebugStatus = 1 THEN

      (* Succeed *)
      Valid := False;
      PrgStep := 300;

   ELSE

      (* Permanent Error, the attempt to create a rederence failed *)
      PrgStep := 900;

   END_IF; 

END_IF; (* End of PrgStep 200 *)  




(* Step 300 - Call the GCConnectionStatus firmware function call cyclically
              until the result is derived *)

   IF PrgStep = 300 THEN


   (* Disconnect when Enable- parameter is set to value False by call the 
      "GCDisconnect" firmware function call *)

   IF Not En_C THEN

      GCDisconnectReq( ConnectRef := Id.Reference);

      PrgStep := 400;
      Valid := False;
      Error := False; (*  #48285  reset the Error flag to false when En_C is set to False *)


   ELSE    

      AsyncStatus := GCConnectionStatus(ConnectRef := Id.Reference );

         (* The result of the Asynchronous  operation:

            0 = Pending operation 
            1 = Succeed
           &lt;0 = Any error

          *)

      IF AsyncStatus = 1 THEN

         (* Stay in step 300 and repeat the GCConnectionStatus firmware function call *)

         Valid := True;
         ConnectionError := False;
         Error := False;
         Status := 1;
         PrgStep :=300;

         (* The attempt to establish a connection failed or is interrupted
            after an already established connection *)


       (* The protocol handler has been removed in the HW- tree, go to
          step 910 and wait for En_C set to value False *)         

      ELSIF AsyncStatus = -6803 THEN

         (* Go to step 900 and report error *)

         Status := AsyncStatus;         
         Error := NOT ConnectionError;
         ConnectionError := True;
         Valid := False;
         PrgStep := 910;            

      ELSIF AsyncStatus = -6812 THEN

         (* Hide the error and retry *)

         GCDisconnectReq( ConnectRef := Id.Reference);

         Error := False;
         ConnectionError := False;
         Valid := False;
         PrgStep := 500;

      ELSIF AsyncStatus &lt; 0 THEN

         (* Stay in step 300 and repeat the GCConnectionStatus firmware function call *)  

         Status := AsyncStatus;
         Error := NOT ConnectionError;
         ConnectionError := True;
         Valid := False;
         PrgStep := 300;

      END_IF;

   END_IF;

END_IF; (* End of PrgStep 300 *) 




(* Step 400 - Wait for the result from the Asynchronous status is returned,
              i.e. the disconnection is concluded. *)
(* Step 500 - Same as 400 but don't show the result as valid or error. *)

IF PrgStep = 400 OR PrgStep = 500 THEN

   AsyncStatus := GCConnectionStatus(ConnectRef := Id.Reference );

   IF AsyncStatus &lt;&gt; 0 THEN

      IF PrgStep = 400 THEN
         
         Status := 1;
         
      END_IF;
      
      (* Return to idle step 100 in any case of result *)

      PrgStep := 100;

   END_IF; 

END_IF; (* End of PrgStep 400 and 500 *)




(* Step 900 - The error step *)

IF PrgStep = 900 THEN

   IF DebugStatus &lt; 0 then

      Status := DebugStatus;
      PrgStep := 910;

   ELSE

      Status := AsyncStatus;
      PrgStep := 100;

   END_IF;

   Error := True;
   Valid := False;

END_IF;  (* End of PrgStep 900*)



(* Step 910 - Wait for the En_C set to value True before return to idle
              step 100 after a debug status has occured *)

IF PrgStep = 910 AND not En_C THEN

      PrgStep := 100;

END_IF; (* End of PrgStep 910 *)

ID.Valid := Valid;

</ST_Code></STCodeBlock></CodeBlocks><Description>The MBConnect function block type is used to initiate a communication channel
and establish a connection to a remote system with a unique node address on
a network.</Description><CheckSum Value="48592"/></FunctionBlockType>